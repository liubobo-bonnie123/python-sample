#!/usr/bin/env python
# 10/29/10 Searches the trade book database for provided list of books and find the book description. 
# Input: providefilename.txt  any txt file with books to search.
# Creates: OUT_providefilename.csv which list ISBN,TITLE,DESC  (comma delimited format)

import sys
import os
import sqlite3
from optparse import OptionParser
import pdb
import csv

def buildxml(bookID):
    
    global count

    xmlfile = open('build.xml','wt')
 
 
    xmlfile.write('<?xml version="1.0" encoding="UTF-8"?>\n')
    xmlfile.write('<project name="IceBerg" default="build" basedir=".">\n')
    xmlfile.write('\n')
    xmlfile.write('\n')
    xmlfile.write('<!-- set global properties for this build -->\n')
    xmlfile.write('	\n')
    xmlfile.write('	\n')
    xmlfile.write("<!-- The local.properties file is created and updated by the 'android'\n")
    xmlfile.write('     tool.\n')
    xmlfile.write('     It contains the path to the SDK. It should *NOT* be checked into\n')
    xmlfile.write('     Version Control Systems. -->\n')
    xmlfile.write('    <property file="local.properties" />\n')
    xmlfile.write('\n')
    xmlfile.write('    <!-- The build.properties file can be created by you and is never touched\n')
    xmlfile.write("         by the 'android' tool. This is the place to change some of the\n")
    xmlfile.write('         default property values used by the Ant rules.\n')
    xmlfile.write('         Here are some properties you may want to change/update:\n')
    xmlfile.write('\n')
    xmlfile.write('         source.dir\n')
    xmlfile.write("             The name of the source directory. Default is 'src'.'\n")
    xmlfile.write('         out.dir\n')
    xmlfile.write("             The name of the output directory. Default is 'bin'.\n")
    xmlfile.write('\n')
    xmlfile.write('         Properties related to the SDK location or the project target should\n')
    xmlfile.write("         be updated using the 'android' tool with the 'update' action.\n")
    xmlfile.write('\n')
    xmlfile.write('         This file is an integral part of the build system for your\n')
    xmlfile.write('         application and should be checked into Version Control Systems.\n')
    xmlfile.write('\n')
    xmlfile.write('         -->\n')
    xmlfile.write('    <property file="build.properties" />\n')
    xmlfile.write('\n')
    xmlfile.write("    <!-- The default.properties file is created and updated by the 'android'\n")
    xmlfile.write('         tool, as well as ADT.\n')
    xmlfile.write('         This file is an integral part of the build system for your\n')
    xmlfile.write('         application and should be checked into Version Control Systems. -->\n')
    xmlfile.write('    <property file="default.properties" />\n')
    xmlfile.write('\n')
    xmlfile.write('    <!-- Custom Android task to deal with the project target, and import the\n')
    xmlfile.write('         proper rules.\n')
    xmlfile.write('         This requires ant 1.6.0 or above. -->\n')
    xmlfile.write('    <path id="android.antlibs">\n')
    xmlfile.write('        <pathelement path="${sdk.dir}/tools/lib/anttasks.jar" />\n')
    xmlfile.write('        <pathelement path="${sdk.dir}/tools/lib/sdklib.jar" />\n')
    xmlfile.write('        <pathelement path="${sdk.dir}/tools/lib/androidprefs.jar" />\n')
    xmlfile.write('    </path>\n')
    xmlfile.write('\n')
    xmlfile.write('    <taskdef name="setup"\n')
    xmlfile.write('        classname="com.android.ant.SetupTask"\n')
    xmlfile.write('        classpathref="android.antlibs" />\n')
    xmlfile.write('\n')
    xmlfile.write('		<!--RulesStart-->\n')
    xmlfile.write('\n')
    xmlfile.write('    <!--\n')
    xmlfile.write('        This rules file is meant to be imported by the custom Ant task:\n')
    xmlfile.write('            com.android.ant.SetupTask\n')
    xmlfile.write('\n')
    xmlfile.write('        The following properties are put in place by the importing task:\n')
    xmlfile.write('            android.jar, android.aidl, aapt, aidl, and dx\n')
    xmlfile.write('\n')
    xmlfile.write('        Additionnaly, the task sets up the following classpath reference:\n')
    xmlfile.write('            android.target.classpath\n')
    xmlfile.write('        This is used by the compiler task as the boot classpath.\n')
    xmlfile.write('    -->\n')
    xmlfile.write('\n')
    xmlfile.write('    <!-- Custom tasks -->\n')
    xmlfile.write('    <taskdef name="aapt"\n')
    xmlfile.write('        classname="com.android.ant.AaptExecLoopTask"\n')
    xmlfile.write('        classpathref="android.antlibs" />\n')
    xmlfile.write('\n')
    xmlfile.write('    <taskdef name="aidl"\n')
    xmlfile.write('        classname="com.android.ant.AidlExecTask"\n')
    xmlfile.write('        classpathref="android.antlibs" />\n')
    xmlfile.write('\n')
    xmlfile.write('    <taskdef name="apkbuilder"\n')
    xmlfile.write('        classname="com.android.ant.ApkBuilderTask"\n')
    xmlfile.write('        classpathref="android.antlibs" />\n')
    xmlfile.write('\n')
    xmlfile.write('    <taskdef name="xpath"\n')
    xmlfile.write('        classname="com.android.ant.XPathTask"\n')
    xmlfile.write('        classpathref="android.antlibs" />\n')
    xmlfile.write('\n')
    xmlfile.write('    <taskdef name="if"\n')
    xmlfile.write('        classname="com.android.ant.IfElseTask"\n')
    xmlfile.write('        classpathref="android.antlibs" />\n')
    xmlfile.write('\n')
    xmlfile.write('    <!-- Properties -->\n')
    xmlfile.write('\n')
    xmlfile.write('    <!-- Tells adb which device to target. You can change this from the command line\n')
    xmlfile.write('         by invoking "ant -Dadb.device.arg=-d" for device "ant -Dadb.device.arg=-e" for\n')
    xmlfile.write('         the emulator. -->\n')
    xmlfile.write('		<!-- <property name="src" location="src"/>\n')
    xmlfile.write('	<property name="res" location="res"/>\n')
    xmlfile.write('	<property name="customizations" location="customizations"/>-->\n')
    xmlfile.write('    <property name="adb.device.arg" value="" />\n')
    xmlfile.write('\n')
    xmlfile.write('    <property name="android.tools.dir" location="${sdk.dir}/tools" />\n')
    xmlfile.write('    <!-- Name of the application package extracted from manifest file -->\n')
    xmlfile.write('    <xpath input="AndroidManifest.xml" expression="/manifest/@package"\n')
    xmlfile.write('                output="manifest.package" />\n')
    xmlfile.write('    <!-- Value of the debuggable attribute (Application node) extracted from manifest file -->\n')
    xmlfile.write('    <xpath input="AndroidManifest.xml" expression="/manifest/application/@android:debuggable"\n')
    xmlfile.write('                output="manifest.debuggable" default="false"/>\n')
    xmlfile.write('    <!-- Value of the debuggable attribute (Application node) extracted from manifest file -->\n')
    xmlfile.write('    <xpath input="AndroidManifest.xml" expression="/manifest/application/@android:hasCode"\n')
    xmlfile.write('                output="manifest.hasCode" default="true"/>\n')
    xmlfile.write('\n')
    xmlfile.write('    <!-- Input directories -->\n')
    xmlfile.write('    <property name="build.log.dir" location="${basedir}/buildlogs"/>\n')
    xmlfile.write('    <property name="source.dir" value="src" />\n')
    xmlfile.write('    <property name="source.absolute.dir" location="${source.dir}" />\n')
    xmlfile.write('    <property name="gen.dir" value="gen" />\n')
    xmlfile.write('    <property name="gen.absolute.dir" location="${gen.dir}" />\n')
    xmlfile.write('    <property name="resource.dir" value="res" />\n')
    xmlfile.write('    <property name="resource.absolute.dir" location="${resource.dir}" />\n')
    xmlfile.write('    <property name="asset.dir" value="assets" />\n')
    xmlfile.write('    <property name="assets.from.dir" location="Sample_EPubs/'+bookID+'/Uniberg" />\n')
    xmlfile.write('    <property name="asset.absolute.dir" location="${asset.dir}" />\n')
    xmlfile.write('\n')
    xmlfile.write('    <!-- Directory for the third party java libraries -->\n')
    xmlfile.write('    <property name="external.libs.dir" value="libs" />\n')
    xmlfile.write('    <property name="external.libs.absolute.dir" location="${external.libs.dir}" />\n')
    xmlfile.write('\n')
    xmlfile.write('    <!-- Directory for the native libraries -->\n')
    xmlfile.write('    <property name="native.libs.dir" value="libs" />\n')
    xmlfile.write('    <property name="native.libs.absolute.dir" location="${native.libs.dir}" />\n')
    xmlfile.write('\n')
    xmlfile.write('    <!-- Output directories -->\n')
    xmlfile.write('    <property name="out.dir" value="bin" />\n')
    xmlfile.write('    <property name="out.absolute.dir" location="${out.dir}" />\n')
    xmlfile.write('    <property name="out.classes.dir" value="${out.absolute.dir}/classes" />\n')
    xmlfile.write('    <property name="out.classes.absolute.dir" location="${out.classes.dir}" />\n')
    xmlfile.write('    <property name="out.dex.input.absolute.dir" value="${out.classes.absolute.dir}" />\n')
    xmlfile.write('\n')
    xmlfile.write('    <!-- Intermediate files -->\n')
    xmlfile.write('    <property name="dex.file.name" value="classes.dex" />\n')
    xmlfile.write('    <property name="intermediate.dex.file"\n')
    xmlfile.write('                  location="${out.absolute.dir}/${dex.file.name}" />\n')
    xmlfile.write('    <property name="resource.package.file.name"\n')
    xmlfile.write('                  value="'+bookID+'.ap_" />\n')
    xmlfile.write('\n')
    xmlfile.write('    <!-- The final package file to generate\n')
    xmlfile.write('         These can be overridden by setting them earlier to\n')
    xmlfile.write('         different values -->\n')
    xmlfile.write('   <!-- <property name="out.apk.unaligned.file"\n')
    xmlfile.write('                  location="${out.absolute.dir}/${ant.project.name}-unaligned.apk" />-->\n')
    xmlfile.write('    <property name="out.apk.file"\n')
    xmlfile.write('                  location="${out.absolute.dir}/'+bookID+'.apk" />\n')
    xmlfile.write('   <!-- <property name="out.unsigned.file.name"\n')
    xmlfile.write('                  value="${ant.project.name}-unsigned.apk" />\n')
    xmlfile.write('    <property name="out.unsigned.file"\n')
    xmlfile.write('                  location="${out.absolute.dir}/${out.unsigned.file.name}" />\n')
    xmlfile.write('    <property name="out.unaligned.file.name"\n')
    xmlfile.write('                  value="${ant.project.name}-unaligned.apk" />\n')
    xmlfile.write('    <property name="out.unaligned.file"\n')
    xmlfile.write('                  location="${out.absolute.dir}/${out.unaligned.file.name}" />\n')
    xmlfile.write('\n')
    xmlfile.write('    <property name="out.release.file.name"\n')
    xmlfile.write('                  value="${ant.project.name}-release.apk" />\n')
    xmlfile.write('    <property name="out.release.file"\n')
    xmlfile.write('                  location="${out.absolute.dir}/${out.release.file.name}" />-->\n')
    xmlfile.write('\n')
    xmlfile.write("   <!-- set some properties used for filtering/override. If those weren't defined\n")
    xmlfile.write('         before, then this will create them with empty values, which are then ignored\n')
    xmlfile.write('         by the custom tasks receiving them. -->\n')
    xmlfile.write('    <property name="version.code" value="" />\n')
    xmlfile.write('   <property name="aapt.resource.filter" value="" />\n')
    xmlfile.write('    <property name="filter.abi" value="" />\n')
    xmlfile.write('\n')
    xmlfile.write('    <!-- Verbosity -->\n')
    xmlfile.write('  <!--  <property name="verbose" value="false" />-->\n')
    xmlfile.write("    <!-- This is needed by emma as it uses multilevel verbosity instead of simple 'true' or 'false'\n")
    xmlfile.write("         The property 'verbosity' is not user configurable and depends exclusively on 'verbose'\n")
    xmlfile.write('         value.-->\n')
    xmlfile.write('   <!-- <condition property="verbosity" value="verbose" else="quiet">\n')
    xmlfile.write('        <istrue value="${verbose}" />\n')
    xmlfile.write('    </condition>-->\n')
    xmlfile.write("    <!-- This is needed to switch verbosity of zipalign. Depends exclusively on 'verbose'\n")
    xmlfile.write('         -->\n')
    xmlfile.write('   <!-- <condition property="v.option" value="-v" else="">\n')
    xmlfile.write('        <istrue value="${verbose}" />\n')
    xmlfile.write('    </condition>_\n')
    xmlfile.write("     This is needed to switch verbosity of dx. Depends exclusively on 'verbose' -->\n")
    xmlfile.write('  <condition property="verbose.option" value="--verbose" else="">\n')
    xmlfile.write('        <istrue value="${verbose}" />\n')
    xmlfile.write('    </condition>\n')
    xmlfile.write('\n')
    xmlfile.write('    <!-- properties for signing in release mode -->\n')
    xmlfile.write('  <!--  <condition property="has.keystore">\n')
    xmlfile.write('        <and>\n')
    xmlfile.write('            <isset property="key.store" />\n')
    xmlfile.write('            <length string="${key.store}" when="greater" length="0" />\n')
    xmlfile.write('            <isset property="key.alias" />\n')
    xmlfile.write('        </and>\n')
    xmlfile.write('    </condition>\n')
    xmlfile.write('    <condition property="has.password">\n')
    xmlfile.write('        <and>\n')
    xmlfile.write('            <isset property="has.keystore" />\n')
    xmlfile.write('            <isset property="key.store.password" />\n')
    xmlfile.write('            <isset property="key.alias.password" />\n')
    xmlfile.write('        </and>\n')
    xmlfile.write('    </condition>-->\n')
    xmlfile.write('\n')
    xmlfile.write('    <!-- Tools -->\n')
    xmlfile.write('    <condition property="exe" value=".exe" else=""><os family="windows" /></condition>\n')
    xmlfile.write('    <property name="adb" location="${android.tools.dir}/adb${exe}" />\n')
    xmlfile.write('    <property name="zipalign" location="${android.tools.dir}/zipalign${exe}" />\n')
    xmlfile.write('\n')
    xmlfile.write('    <!-- Emma configuration -->\n')
    xmlfile.write('    <property name="emma.dir" value="${sdk.dir}/tools/lib" />\n')
    xmlfile.write('        <path id="emma.lib">\n')
    xmlfile.write('            <pathelement location="${emma.dir}/emma.jar" />\n')
    xmlfile.write('            <pathelement location="${emma.dir}/emma_ant.jar" />\n')
    xmlfile.write('        </path>\n')
    xmlfile.write('    <taskdef resource="emma_ant.properties" classpathref="emma.lib" />\n')
    xmlfile.write('    <!-- End of emma configuration -->\n')
    xmlfile.write('\n')
    xmlfile.write('    <!-- Macros -->\n')
    xmlfile.write('\n')
    xmlfile.write('    <!-- Configurable macro, which allows to pass as parameters output directory,\n')
    xmlfile.write('         output dex filename and external libraries to dex (optional) -->\n')
    xmlfile.write(' <macrodef name="dex-helper">\n')
    xmlfile.write('       <element name="external-libs" optional="yes" />\n')
    xmlfile.write('       <element name="extra-parameters" optional="yes" />\n')
    xmlfile.write('       <sequential>\n')
    xmlfile.write('\n')
    xmlfile.write('         <echo>Converting compiled files and external libraries into ${intermediate.dex.file}...</echo>\n')
    xmlfile.write('         <apply executable="${dx}" failonerror="true" parallel="true">\n')
    xmlfile.write('		     <arg value="--dex" />\n')
    xmlfile.write('			  \n')
    xmlfile.write('             <arg value="--output=${intermediate.dex.file}" />\n')
    xmlfile.write('             <extra-parameters />\n')
    xmlfile.write('             <arg line="${verbose.option}" />\n')
    xmlfile.write('             <arg path="${out.dex.input.absolute.dir}" />\n')
    xmlfile.write('             <fileset dir="${external.libs.absolute.dir}" includes="*.jar" />\n')
    xmlfile.write('             <path refid="android.libraries.jars" />\n')
    xmlfile.write('             <external-libs />\n')
    xmlfile.write('         </apply>\n')
    xmlfile.write('       </sequential>\n')
    xmlfile.write('    </macrodef>\n')
    xmlfile.write('\n')
    xmlfile.write('    <!-- This is macro that enable passing variable list of external jar files to ApkBuilder\n')
    xmlfile.write('         Example of use:\n')
    xmlfile.write('         <package-helper sign.package="true" output.filepath="/path/to/foo.apk">\n')
    xmlfile.write('             <extra-jars>\n')
    xmlfile.write('                <jarfolder path="my_jars" />\n')
    xmlfile.write('                <jarfile path="foo/bar.jar" />\n')
    xmlfile.write('                <jarfolder path="your_jars" />\n')
    xmlfile.write('             </extra-jars>\n')
    xmlfile.write('         </package-helper> -->\n')
    xmlfile.write('    <macrodef name="package-helper">\n')
    xmlfile.write('        <attribute name="sign.package" />\n')
    xmlfile.write('        <attribute name="output.filepath" />\n')
    xmlfile.write('        <element name="extra-jars" optional="yes" />\n')
    xmlfile.write('        <sequential>\n')
    xmlfile.write('            <apkbuilder\n')
    xmlfile.write('                    outfolder="${out.absolute.dir}"\n')
    xmlfile.write('                    resourcefile="${resource.package.file.name}"\n')
    xmlfile.write('                    apkfilepath="@{output.filepath}"\n')
    xmlfile.write('                    signed="@{sign.package}"\n')
    xmlfile.write('                    debug="${manifest.debuggable}"\n')
    xmlfile.write('                    abifilter="${filter.abi}"\n')
    xmlfile.write('                    verbose="${verbose}"\n')
    xmlfile.write('                    hascode="${manifest.hasCode}">\n')
    xmlfile.write('                <dex path="${intermediate.dex.file}"/>\n')
    xmlfile.write('                <sourcefolder path="${source.absolute.dir}"/>\n')
    xmlfile.write('                <sourcefolder refid="android.libraries.src"/>\n')
    xmlfile.write('                <jarfolder path="${external.libs.absolute.dir}" />\n')
    xmlfile.write('                <jarfolder refid="android.libraries.libs" />\n')
    xmlfile.write('                <nativefolder path="${native.libs.absolute.dir}" />\n')
    xmlfile.write('                <nativefolder refid="android.libraries.libs" />\n')
    xmlfile.write('                <extra-jars/>\n')
    xmlfile.write('            </apkbuilder>\n')
    xmlfile.write('        </sequential>\n')
    xmlfile.write('    </macrodef>\n')
    xmlfile.write('\n')
    xmlfile.write('    <!-- This is macro which zipaligns in.package and outputs it to out.package. Used by targets\n')
    xmlfile.write('         debug, -debug-with-emma and release.-->\n')
    xmlfile.write('    <macrodef name="zipalign-helper">\n')
    xmlfile.write('        <attribute name="in.package" />\n')
    xmlfile.write('        <attribute name="out.package" />\n')
    xmlfile.write('        <sequential>\n')
    xmlfile.write('            <echo>Running zip align on final apk...</echo>\n')
    xmlfile.write('            <exec executable="${zipalign}" failonerror="true">\n')
    xmlfile.write('                <arg line="${v.option}" />\n')
    xmlfile.write('                <arg value="-f" />\n')
    xmlfile.write('                <arg value="4" />\n')
    xmlfile.write('                <arg path="@{in.package}" />\n')
    xmlfile.write('                <arg path="@{out.package}" />\n')
    xmlfile.write('            </exec>\n')
    xmlfile.write('        </sequential>\n')
    xmlfile.write('    </macrodef>\n')
    xmlfile.write('\n')
    xmlfile.write('    <!-- This is macro used only for sharing code among two targets, -install and\n')
    xmlfile.write('         -install-with-emma which do exactly the same but differ in dependencies -->\n')
    xmlfile.write('    <macrodef name="install-helper">\n')
    xmlfile.write('        <sequential>\n')
    xmlfile.write('            <echo>Installing ${out.debug.file} onto default emulator or device...</echo>\n')
    xmlfile.write('            <exec executable="${adb}" failonerror="true">\n')
    xmlfile.write('                <arg line="${adb.device.arg}" />\n')
    xmlfile.write('                <arg value="install" />\n')
    xmlfile.write('                <arg value="-r" />\n')
    xmlfile.write('                <arg path="${out.debug.file}" />\n')
    xmlfile.write('            </exec>\n')
    xmlfile.write('        </sequential>\n')
    xmlfile.write('    </macrodef>\n')
    xmlfile.write('\n')
    xmlfile.write('    <!-- Rules -->\n')
    xmlfile.write('	<!--\n')
    xmlfile.write('	<copy todir="${to.dir}">\n')
    xmlfile.write('<fileset dir="${from.dir}">\n')
    xmlfile.write('<include name="*.jar,*.zip">\n')
    xmlfile.write('</fileset>\n')
    xmlfile.write('</copy>-->\n')
    xmlfile.write('<!--Edit Starts-->\n')
    xmlfile.write('	<target name="delete">\n')
    xmlfile.write('	<mkdir dir="${build.log.dir}"/>\n')
    xmlfile.write('	 <property name="build.log.filename" value="build.log"/>\n')
    xmlfile.write('	 <record name="${build.log.dir}/${build.log.filename}" loglevel="verbose" append="true"/>\n')
    xmlfile.write('	 <echo message="Building book :'+bookID+'"/>\n')
    xmlfile.write('	 <delete includeemptydirs="true">\n')
    xmlfile.write('   <fileset dir="${asset.dir}" defaultexcludes="false">\n')
    xmlfile.write('  <include name="**/**/**" />\n')
    xmlfile.write(' </fileset>\n')
    xmlfile.write(' </delete>\n')
    xmlfile.write(' </target>\n')
    xmlfile.write(' <target name="copy" depends="delete">\n')
    xmlfile.write(' <mkdir dir="${asset.dir}"/>\n')
    xmlfile.write(' <copy todir="${asset.dir}">\n')
    xmlfile.write(' <fileset dir="${assets.from.dir}">\n')
    xmlfile.write(' <include name="**/**/*.*"/>\n')
    xmlfile.write(' </fileset>\n')
    xmlfile.write(' </copy>\n')
    xmlfile.write(' <delete file="res/drawable/app_icon_book.png" />\n')
    xmlfile.write('  <copy file="assets/OEBPS/images/app_icon_book.png" todir="res/drawable" />\n')
    xmlfile.write('  </target>\n')
    xmlfile.write('	<target name="IcebergBuild" depends="copy" description="replacing the import statement and application pakage name" >\n')
    xmlfile.write('\n')
    xmlfile.write('	<!--change the import statements .java -->\n')
    xmlfile.write('		<replaceregexp flags="g" byline="false">\n')
    xmlfile.write('		    <regexp pattern="import com.forside.android(.*).R;" /> \n')
    bookIDnodash = bookID.replace('-','')
    xmlfile.write('		    <substitution expression="import com.forside.android.'+bookIDnodash+'.R;" />\n')
    xmlfile.write('		    <fileset dir="src" includes="**/*.java" /> \n')
    xmlfile.write('		</replaceregexp>\n')
    xmlfile.write('		<!-- change the package name in AndroidManifest -->\n')
    xmlfile.write('		<replaceregexp flags="g" byline="false">\n')
    xmlfile.write('		    <regexp pattern="package=&quot;com.forside.android(.*)&quot;" /> \n')
    xmlfile.write('		    <substitution expression="package=&quot;com.forside.android.'+bookIDnodash+'&quot;" />\n')
    xmlfile.write('		    <fileset dir="" includes="AndroidManifest.xml" /> \n')
    xmlfile.write('		</replaceregexp>\n')
    xmlfile.write('	\n')
    xmlfile.write('		<replaceregexp flags="g" byline="false">\n')
    xmlfile.write('		     <regexp pattern="android:label=&quot;(.*)&quot;" /> \n')
    xmlfile.write('		    <substitution expression="android:label=&quot;'+bookID+'&quot;" />\n')
    xmlfile.write('		    <fileset dir="" includes="AndroidManifest.xml" /> \n')
    xmlfile.write('		</replaceregexp>\n')
    xmlfile.write('	\n')
    xmlfile.write('		 <echo>Edit has been completed</echo>\n')
    xmlfile.write('	</target>\n')
    xmlfile.write('	<!--Edit Ends-->\n')
    xmlfile.write("    <!-- Creates the output directories if they don't exist yet. -->\n")
    xmlfile.write('    <target name="-dirs" depends="IcebergBuild">\n')
    xmlfile.write('        <echo>Creating output directories if needed...</echo>\n')
    xmlfile.write('        <mkdir dir="${resource.absolute.dir}" />\n')
    xmlfile.write('        <mkdir dir="${external.libs.absolute.dir}" />\n')
    xmlfile.write('        <mkdir dir="${out.absolute.dir}" />\n')
    xmlfile.write('        <if condition="${manifest.hasCode}">\n')
    xmlfile.write('            <then>\n')
    xmlfile.write('                <mkdir dir="${gen.absolute.dir}" />\n')
    xmlfile.write('                <mkdir dir="${out.classes.absolute.dir}" />\n')
    xmlfile.write('            </then>\n')
    xmlfile.write('        </if>\n')
    xmlfile.write('    </target>\n')
    xmlfile.write('\n')
    xmlfile.write('    <!-- empty default pre-build target. Create a similar target in\n')
    xmlfile.write("         your build.xml and it'll be called instead of this one. -->\n")
    xmlfile.write('    <target name="-pre-build"/>\n')
    xmlfile.write('\n')
    xmlfile.write("    <!-- Generates the R.java file for this project's resources. -->\n")
    xmlfile.write('    <target name="-resource-src" depends="-dirs, -pre-build">\n')
    xmlfile.write('        <if condition="${manifest.hasCode}">\n')
    xmlfile.write('            <then>\n')
    xmlfile.write('                <echo>Generating R.java / Manifest.java from the resources...</echo>\n')
    xmlfile.write('                <aapt executable="${aapt}"\n')
    xmlfile.write('                        command="package"\n')
    xmlfile.write('                        verbose="${verbose}"\n')
    xmlfile.write('                        manifest="AndroidManifest.xml"\n')
    xmlfile.write('                        androidjar="${android.jar}"\n')
    xmlfile.write('                        rfolder="${gen.absolute.dir}">\n')
    xmlfile.write('                    <res path="${resource.absolute.dir}" />\n')
    xmlfile.write('                </aapt>\n')
    xmlfile.write('            </then>\n')
    xmlfile.write('            <else>\n')
    xmlfile.write('                <echo>hasCode = false. Skipping...</echo>\n')
    xmlfile.write('            </else>\n')
    xmlfile.write('        </if>\n')
    xmlfile.write('    </target>\n')
    xmlfile.write('\n')
    xmlfile.write('    <!-- Generates java classes from .aidl files. -->\n')
    xmlfile.write('    <target name="-aidl" depends="-dirs">\n')
    xmlfile.write('        <if condition="${manifest.hasCode}">\n')
    xmlfile.write('            <then>\n')
    xmlfile.write('                <echo>Compiling aidl files into Java classes...</echo>\n')
    xmlfile.write('                <aidl executable="${aidl}" framework="${android.aidl}"\n')
    xmlfile.write('                        genFolder="${gen.absolute.dir}">\n')
    xmlfile.write('                    <source path="${source.absolute.dir}"/>\n')
    xmlfile.write('                    <source refid="android.libraries.src"/>\n')
    xmlfile.write('                </aidl>\n')
    xmlfile.write('            </then>\n')
    xmlfile.write('            <else>\n')
    xmlfile.write('                <echo>hasCode = false. Skipping...</echo>\n')
    xmlfile.write('            </else>\n')
    xmlfile.write('        </if>\n')
    xmlfile.write('    </target>\n')
    xmlfile.write('\n')
    xmlfile.write('    <!-- empty default pre-compile target. Create a similar target in\n')
    xmlfile.write("         your build.xml and it'll be called instead of this one. -->\n")
    xmlfile.write('    <target name="-pre-compile"/>\n')
    xmlfile.write('\n')
    xmlfile.write("    <!-- Compiles this project's .java files into .class files. -->\n")
    xmlfile.write('    <target name="compile" depends="-resource-src, -aidl, -pre-compile"\n')
    xmlfile.write('                description="Compiles project''s .java files into .class files">\n')
    xmlfile.write('        <if condition="${manifest.hasCode}">\n')
    xmlfile.write('            <then>\n')
    xmlfile.write("                <!-- If android rules are used for a test project, its classpath should include\n")
    xmlfile.write('                     tested project''s location -->\n')
    xmlfile.write('                <condition property="extensible.classpath"\n')
    xmlfile.write('                        value="${tested.project.absolute.dir}/bin/classes"\n')
    xmlfile.write('                        else=".">\n')
    xmlfile.write('                    <isset property="tested.project.absolute.dir" />\n')
    xmlfile.write('                </condition>\n')
    xmlfile.write('                <condition property="extensible.libs.classpath"\n')
    xmlfile.write('                        value="${tested.project.absolute.dir}/libs"\n')
    xmlfile.write('                        else="./libs">\n')
    xmlfile.write('                    <isset property="tested.project.absolute.dir" />\n')
    xmlfile.write('                </condition>\n')
    xmlfile.write('                <javac encoding="ascii" target="1.5" debug="true" extdirs=""\n')
    xmlfile.write('                        destdir="${out.classes.absolute.dir}"\n')
    xmlfile.write('                        bootclasspathref="android.target.classpath"\n')
    xmlfile.write('                        verbose="${verbose}"\n')
    xmlfile.write('                        classpath="${extensible.classpath}"\n')
    xmlfile.write('                        classpathref="android.libraries.jars">\n')
    xmlfile.write('                    <src path="${source.absolute.dir}" />\n')
    xmlfile.write('                    <src path="${gen.absolute.dir}" />\n')
    xmlfile.write('                    <src refid="android.libraries.src" />\n')
    xmlfile.write('                    <classpath>\n')
    xmlfile.write('                        <fileset dir="${external.libs.absolute.dir}" includes="*.jar" />\n')
    xmlfile.write('                        <fileset dir="${extensible.libs.classpath}" includes="*.jar" />\n')
    xmlfile.write('                    </classpath>\n')
    xmlfile.write('                </javac>\n')
    xmlfile.write('            </then>\n')
    xmlfile.write('            <else>\n')
    xmlfile.write('                <echo>hasCode = false. Skipping...</echo>\n')
    xmlfile.write('            </else>\n')
    xmlfile.write('        </if>\n')
    xmlfile.write('    </target>\n')
    xmlfile.write('\n')
    xmlfile.write('    <!-- empty default post-compile target. Create a similar target in\n')
    xmlfile.write("         your build.xml and it'll be called instead of this one. -->\n")
    xmlfile.write('    <target name="-post-compile"/>\n')
    xmlfile.write('\n')
    xmlfile.write("    <!-- Converts this project's .class files into .dex files -->\n")
    xmlfile.write('    <target name="-dex" depends="compile, -post-compile"\n')
    xmlfile.write('            unless="do.not.compile">\n')
    xmlfile.write('			<echo> manifest vlaue:${manifest.hasCode}..</echo>\n')
    xmlfile.write('        <if condition="${manifest.hasCode}">\n')
    xmlfile.write('            <then>\n')
    xmlfile.write('                <dex-helper />\n')
    xmlfile.write('            </then>\n')
    xmlfile.write('            <else>\n')
    xmlfile.write('                <echo>hasCode = false. Skipping...</echo>\n')
    xmlfile.write('            </else>\n')
    xmlfile.write('        </if>\n')
    xmlfile.write('    </target>\n')
    xmlfile.write('\n')
    xmlfile.write("    <!-- Puts the project's resources into the output package file\n")
    xmlfile.write('         This actually can create multiple resource package in case\n')
    xmlfile.write('         Some custom apk with specific configuration have been\n')
    xmlfile.write('         declared in default.properties.\n')
    xmlfile.write('         -->\n')
    xmlfile.write('    <target name="-package-resources">\n')
    xmlfile.write('        <echo>Packaging resources</echo>\n')
    xmlfile.write('        <aapt executable="${aapt}"\n')
    xmlfile.write('                command="package"\n')
    xmlfile.write('                versioncode="${version.code}"\n')
    xmlfile.write('                manifest="AndroidManifest.xml"\n')
    xmlfile.write('                assets="${asset.absolute.dir}"\n')
    xmlfile.write('                androidjar="${android.jar}"\n')
    xmlfile.write('                apkfolder="${out.absolute.dir}"\n')
    xmlfile.write('                resourcefilename="${resource.package.file.name}"\n')
    xmlfile.write('                resourcefilter="${aapt.resource.filter}">\n')
    xmlfile.write('            <res path="${resource.absolute.dir}" />\n')
    xmlfile.write('            <!-- <nocompress /> forces no compression on any files in assets or res/raw -->\n')
    xmlfile.write('            <!-- <nocompress extension="xml" /> forces no compression on specific file extensions in assets and res/raw -->\n')
    xmlfile.write('        </aapt>\n')
    xmlfile.write('    </target>\n')
    xmlfile.write('\n')
    xmlfile.write('    <!-- Packages the application and sign it with a debug key. -->\n')
    xmlfile.write('    <target name="-package-debug-sign" depends="-dex, -package-resources">\n')
    xmlfile.write('        <package-helper\n')
    xmlfile.write('                sign.package="true"\n')
    xmlfile.write('                output.filepath="${out.debug.unaligned.file}" />\n')
    xmlfile.write('    </target>\n')
    xmlfile.write('\n')
    xmlfile.write('    <!-- Packages the application without signing it. -->\n')
    xmlfile.write('    <target name="-package-release" depends="-dex, -package-resources">\n')
    xmlfile.write('        <package-helper\n')
    xmlfile.write('                sign.package="true"\n')
    xmlfile.write('                output.filepath="${out.apk.file}"/>\n')
    xmlfile.write('    </target>\n')
    xmlfile.write('\n')
    xmlfile.write('    <target name="-compile-tested-if-test" if="tested.project.dir" unless="do.not.compile.again">\n')
    xmlfile.write('       <subant target="compile">\n')
    xmlfile.write('            <fileset dir="${tested.project.absolute.dir}" includes="build.xml" />\n')
    xmlfile.write('       </subant>\n')
    xmlfile.write('    </target>\n')
    xmlfile.write('<target name="debug" depends="-package-release"\n')
    xmlfile.write('                description="Builds the application and signs it with a debug key.">\n')
    xmlfile.write('       <!-- <zipalign-helper in.package="${out.debug.unaligned.file}"\n')
    xmlfile.write('                                   out.package="${out.debug.file}" />-->\n')
    xmlfile.write('        <echo> Package: ${out.apk.file}</echo>\n')
    xmlfile.write('    </target>\n')
    xmlfile.write('    <!-- Builds debug output package, provided all the necessary files are already dexed -->\n')
    xmlfile.write('   <!-- <target name="debug" depends="-compile-tested-if-test, -package-debug-sign"\n')
    xmlfile.write('                description="Builds the application and signs it with a debug key.">\n')
    xmlfile.write('        <zipalign-helper in.package="${out.debug.unaligned.file}"\n')
    xmlfile.write('                                   out.package="${out.debug.file}" />\n')
    xmlfile.write('        <echo>Debug Package: ${out.debug.file}</echo>\n')
    xmlfile.write('    </target>-->\n')
    xmlfile.write('\n')
    xmlfile.write("    <!-- called through target 'release'. Only executed if the keystore and\n")
    xmlfile.write('         key alias are known but not their password. -->\n')
    xmlfile.write('    <target name="-release-prompt-for-password" if="has.keystore" unless="has.password">\n')
    xmlfile.write('        <!-- Gets passwords -->\n')
    xmlfile.write('        <input\n')
    xmlfile.write('                message="Please enter keystore password (store:${key.store}):"\n')
    xmlfile.write('                addproperty="key.store.password" />\n')
    xmlfile.write('        <input\n')
    xmlfile.write('                message="Please enter password for alias ''${key.alias}'':"\n')
    xmlfile.write('                addproperty="key.alias.password" />\n')
    xmlfile.write('    </target>\n')
    xmlfile.write('\n')
    xmlfile.write("    <!-- called through target 'release'. Only executed if there's no\n")
    xmlfile.write('         keystore/key alias set -->\n')
    xmlfile.write('    <target name="-release-nosign" unless="has.keystore">\n')
    xmlfile.write('        <echo>No key.store and key.alias properties found in build.properties.</echo>\n')
    xmlfile.write('        <echo>Please sign ${out.unsigned.file} manually</echo>\n')
    xmlfile.write('        <echo>and run zipalign from the Android SDK tools.</echo>\n')
    xmlfile.write('    </target>\n')
    xmlfile.write('\n')
    xmlfile.write('    <target name="-set-release-mode">\n')
    xmlfile.write('        <property name="build.mode.release" value="true"/>\n')
    xmlfile.write('    </target>\n')
    xmlfile.write('\n')
    xmlfile.write('    <!-- This runs -package-release and -release-nosign first and then runs\n')
    xmlfile.write('         only if release-sign is true (set in -release-check,\n')
    xmlfile.write('         called by -release-no-sign)-->\n')
    xmlfile.write('    <target name="release"\n')
    xmlfile.write('                depends="-set-release-mode, -package-release, -release-prompt-for-password, -release-nosign"\n')
    xmlfile.write('                if="has.keystore"\n')
    xmlfile.write('                description="Builds the application. The generated apk file must be signed before\n')
    xmlfile.write('                            it is published.">\n')
    xmlfile.write('        <!-- Signs the APK -->\n')
    xmlfile.write('        <echo>Signing final apk...</echo>\n')
    xmlfile.write('        <signjar\n')
    xmlfile.write('                jar="${out.unsigned.file}"\n')
    xmlfile.write('                signedjar="${out.unaligned.file}"\n')
    xmlfile.write('                keystore="${key.store}"\n')
    xmlfile.write('                storepass="${key.store.password}"\n')
    xmlfile.write('                alias="${key.alias}"\n')
    xmlfile.write('                keypass="${key.alias.password}"\n')
    xmlfile.write('                verbose="${verbose}" />\n')
    xmlfile.write('\n')
    xmlfile.write('        <!-- Zip aligns the APK -->\n')
    xmlfile.write('        <zipalign-helper in.package="${out.unaligned.file}"\n')
    xmlfile.write('                                   out.package="${out.release.file}" />\n')
    xmlfile.write('        <echo>Release Package: ${out.release.file}</echo>\n')
    xmlfile.write('    </target>\n')
    xmlfile.write('\n')
    xmlfile.write('    <target name="build" depends="debug"\n')
    xmlfile.write('                description="Installs/reinstalls the debug package onto a running\n')
    xmlfile.write('                            emulator or device. If the application was previously installed,\n')
    xmlfile.write('                            the signatures must match." >\n')
    xmlfile.write('       <!-- <install-helper />-->\n')
    xmlfile.write('    </target>\n')
    xmlfile.write('\n')
    xmlfile.write('    <target name="-uninstall-check">\n')
    xmlfile.write('        <condition property="uninstall.run">\n')
    xmlfile.write('           <isset property="manifest.package" />\n')
    xmlfile.write('        </condition>\n')
    xmlfile.write('    </target>\n')
    xmlfile.write('\n')
    xmlfile.write('    <target name="-uninstall-error" depends="-uninstall-check" unless="uninstall.run">\n')
    xmlfile.write("        <echo>Unable to run 'ant uninstall', manifest.package property is not defined.\n")
    xmlfile.write('        </echo>\n')
    xmlfile.write('    </target>\n')
    xmlfile.write('\n')
    xmlfile.write('    <!-- Uninstalls the package from the default emulator/device -->\n')
    xmlfile.write('    <target name="uninstall" depends="-uninstall-error" if="uninstall.run"\n')
    xmlfile.write('                description="Uninstalls the application from a running emulator or device.">\n')
    xmlfile.write('        <echo>Uninstalling ${manifest.package} from the default emulator or device...</echo>\n')
    xmlfile.write('        <exec executable="${adb}" failonerror="true">\n')
    xmlfile.write('            <arg line="${adb.device.arg}" />\n')
    xmlfile.write('            <arg value="uninstall" />\n')
    xmlfile.write('            <arg value="${manifest.package}" />\n')
    xmlfile.write('        </exec>\n')
    xmlfile.write('    </target>\n')
    xmlfile.write('\n')
    xmlfile.write('    <target name="clean" description="Removes output files created by other targets.">\n')
    xmlfile.write('        <delete dir="${out.absolute.dir}" verbose="${verbose}" />\n')
    xmlfile.write('        <delete dir="${gen.absolute.dir}" verbose="${verbose}" />\n')
    xmlfile.write('    </target>\n')
    xmlfile.write('\n')
    xmlfile.write('    <!-- Targets for code-coverage measurement purposes, invoked from external file -->\n')
    xmlfile.write('\n')
    xmlfile.write('    <!-- Emma-instruments tested project classes (compiles the tested project if necessary)\n')
    xmlfile.write('             and writes instrumented classes to ${instrumentation.absolute.dir}/classes -->\n')
    xmlfile.write('    <target name="-emma-instrument" depends="compile">\n')
    xmlfile.write('        <echo>Instrumenting classes from ${out.absolute.dir}/classes...</echo>\n')
    xmlfile.write('        <!-- It only instruments class files, not any external libs -->\n')
    xmlfile.write('        <emma enabled="true">\n')
    xmlfile.write('            <instr verbosity="${verbosity}"\n')
    xmlfile.write('                   mode="overwrite"\n')
    xmlfile.write('                   instrpath="${out.absolute.dir}/classes"\n')
    xmlfile.write('                   outdir="${out.absolute.dir}/classes">\n')
    xmlfile.write('            </instr>\n')
    xmlfile.write('            <!-- TODO: exclusion filters on R*.class and allowing custom exclusion from\n')
    xmlfile.write('                 user defined file -->\n')
    xmlfile.write('        </emma>\n')
    xmlfile.write('    </target>\n')
    xmlfile.write('\n')
    xmlfile.write('    <target name="-dex-instrumented" depends="-emma-instrument">\n')
    xmlfile.write('       <dex-helper>\n')
    xmlfile.write('          <extra-parameters>\n')
    xmlfile.write('            <arg value="--no-locals" />\n')
    xmlfile.write('          </extra-parameters>\n')
    xmlfile.write('          <external-libs>\n')
    xmlfile.write('            <fileset file="${emma.dir}/emma_device.jar" />\n')
    xmlfile.write('          </external-libs>\n')
    xmlfile.write('       </dex-helper>\n')
    xmlfile.write('    </target>\n')
    xmlfile.write('\n')
    xmlfile.write('    <!-- Invoked from external files for code coverage purposes -->\n')
    xmlfile.write('    <target name="-package-with-emma" depends="-dex-instrumented, -package-resources">\n')
    xmlfile.write('        <package-helper\n')
    xmlfile.write('                sign.package="true"\n')
    xmlfile.write('                output.filepath="${out.debug.unaligned.file}">\n')
    xmlfile.write('            <extra-jars>\n')
    xmlfile.write('                <!-- Injected from external file -->\n')
    xmlfile.write('                <jarfile path="${emma.dir}/emma_device.jar" />\n')
    xmlfile.write('            </extra-jars>\n')
    xmlfile.write('        </package-helper>\n')
    xmlfile.write('    </target>\n')
    xmlfile.write('\n')
    xmlfile.write('    <target name="-debug-with-emma" depends="-package-with-emma">\n')
    xmlfile.write('        <zipalign-helper in.package="${out.debug.unaligned.file}"\n')
    xmlfile.write('                                   out.package="${out.debug.file}" />\n')
    xmlfile.write('    </target>\n')
    xmlfile.write('\n')
    xmlfile.write('    <target name="-install-with-emma" depends="-debug-with-emma">\n')
    xmlfile.write('        <install-helper />\n')
    xmlfile.write('    </target>\n')
    xmlfile.write('\n')
    xmlfile.write('    <!-- End of targets for code-coverage measurement purposes -->\n')
    xmlfile.write('\n')
    xmlfile.write('    <target name="help">\n')
    xmlfile.write('        <!-- displays starts at col 13\n')
    xmlfile.write('              |13                                                              80| -->\n')
    xmlfile.write('        <echo>Android Ant Build. Available targets:</echo>\n')
    xmlfile.write('        <echo>   help:      Displays this help.</echo>\n')
    xmlfile.write('        <echo>   clean:     Removes output files created by other targets.</echo>\n')
    xmlfile.write('        <echo>   compile:   Compiles project''s .java files into .class files.</echo>\n')
    xmlfile.write('        <echo>   debug:     Builds the application and signs it with a debug key.</echo>\n')
    xmlfile.write('        <echo>   release:   Builds the application. The generated apk file must be</echo>\n')
    xmlfile.write('        <echo>              signed before it is published.</echo>\n')
    xmlfile.write('        <echo>   install:   Installs/reinstalls the debug package onto a running</echo>\n')
    xmlfile.write('        <echo>              emulator or device.</echo>\n')
    xmlfile.write('        <echo>              If the application was previously installed, the</echo>\n')
    xmlfile.write('        <echo>              signatures must match.</echo>\n')
    xmlfile.write('        <echo>   uninstall: Uninstalls the application from a running emulator or</echo>\n')
    xmlfile.write('        <echo>              device.</echo>\n')
    xmlfile.write('    </target>\n')
    xmlfile.write('<!--RulesEnd-->\n')
    xmlfile.write('\n')
    xmlfile.write('<!-- extension targets. Uncomment the ones where you want to do custom work\n')
    xmlfile.write('     in between standard targets -->\n')
    xmlfile.write('<!--\n')
    xmlfile.write('    <target name="-pre-build">\n')
    xmlfile.write('    </target>\n')
    xmlfile.write('    <target name="-pre-compile">\n')
    xmlfile.write('    </target>\n')
    xmlfile.write('\n')
    xmlfile.write('    [This is typically used for code obfuscation.\n')
    xmlfile.write('     Compiled code location: ${out.classes.absolute.dir}\n')
    xmlfile.write('     If this is not done in place, override ${out.dex.input.absolute.dir}]\n')
    xmlfile.write('    <target name="-post-compile">\n')
    xmlfile.write('    </target>\n')
    xmlfile.write('-->\n')
    xmlfile.write('\n')
    xmlfile.write('\n')
    xmlfile.write('    <!-- Execute the Android Setup task that will setup some properties\n')
    xmlfile.write('         specific to the target, and import the build rules files.\n')
    xmlfile.write('\n')
    xmlfile.write('         The rules file is imported from\n')
    xmlfile.write('            <SDK>/platforms/<target_platform>/ant/ant_rules_r#.xml\n')
    xmlfile.write('\n')
    xmlfile.write('         To customize existing targets, there are two options:\n')
    xmlfile.write('         - Customize only one target:\n')
    xmlfile.write('             - copy/paste the target into this file, *before* the\n')
    xmlfile.write('               <setup> task.\n')
    xmlfile.write('             - customize it to your needs.\n')
    xmlfile.write('         - Customize the whole script.\n')
    xmlfile.write('             - copy/paste the content of the rules files (minus the top node)\n')
    xmlfile.write('               into this file, *after* the <setup> task\n')
    xmlfile.write('             - disable the import of the rules by changing the setup task\n')
    xmlfile.write('               below to <setup import="false" />. \n')
    xmlfile.write('             - customize to your needs.\n')
    xmlfile.write('    -->\n')
    xmlfile.write('    <setup import ="false"/>\n')
    xmlfile.write('\n')
    xmlfile.write('</project>\n')
    xmlfile.write('\n')
 
 

    xmlfile.close()
    #Call Ant script t build app
    os.system("ant\n")

#Main

if os.path.isfile("testenv.txt\n"):
    #Test env found
    path_to_db = "/users/vince/documents/development/Database/product_server.db"
else: 
    #Production
    path_to_db = "/users/dougbaker/cbrdjango/product_server.db"

# db connection
#sqlconn = sqlite3.connect(path_to_db)

#pdb.set_trace()

if not sys.argv[1]:
    print "Must be called with one arguments: input.txt"
    print "Where:"
    print "      input.txt = comma delimited file containing list of forside titles"
    print "This will create a file wiht OUT_providedfiname and NOTFOUND_providedfilename        "
    sys.exit()
    
print "+------------------------------------------------------------------------------+"
print "| getbookID                                             Release: 11/05/2010 |"
print "+------------------------------------------------------------------------------+"
print

if ".csv" in sys.argv[1].lower():
    infile = open(sys.argv[1],"r")
    #print isbn_list

    #xmlfile = open("build.xml",'wt')
    #outfile = csv.writer(open("build.xml","wb\n"))
    
    #notfoundfn = "NOTFOUND_"+sys.argv[1]
    
    count = 0

    for line in infile:
        words = line.split(',')
        #bookISBN = words[0]
        bookID = words[0].replace('\n','').replace('\r','')
 
        if bookID:
            print "Processing Book:", count, "BOOK ID: ",bookID
            buildxml(bookID)
    
    print ".....All DoNe....."
    infile.close()
    #outfile.close()
else:
    print "No file found. Must call with a .csv file with all the book tiles to find bookID"
