#---------------------------------------------------------------------------------------------------------------
#!/usr/bin/env python
# 10/29/10 VR: Creates Android APPS
# Input: Epub files in C:/SM/EPUB_INPUT/*.*
# Creates: Android APPS and place them in folder: C:/SM/EPUB_READY_FOR_UPLOAD/ 

#---------------------------------------------------------------------------------------------------------------

import sys
import os, csv, fnmatch
from optparse import OptionParser
import pdb
import shutil

def convertImageToPng(source, dest):
    cmd = "java -jar convertImage.jar png %s %s" % (source, dest)
    os.system(cmd)

def convertImageToJpg(source, dest):
    cmd = "java -jar convertImage.jar jpg %s %s" % (source, dest)
    os.system(cmd)

def find_files(base, pattern):
    if not os.path.isdir(base):
        return None
    '''Return list of files matching pattern in base folder.'''
    return [n for n in fnmatch.filter(os.listdir(base), pattern) if
        os.path.isfile(os.path.join(base, n))]


def buildxml(bookID, bookFolder):
    
    global count
    xmlfile = open('build.xml','wt')
    xmlfile.write('<?xml version="1.0" encoding="UTF-8"?>\n')
    xmlfile.write('<project name="Iceberg" default="release">\n')
    xmlfile.write('\n')
    xmlfile.write('<!-- set global properties for this build -->\n')
    xmlfile.write('	\n')
    xmlfile.write('	\n')
    xmlfile.write("<!-- The local.properties file is created and updated by the 'android'\n")
    xmlfile.write('     tool.\n')
    xmlfile.write('     It contains the path to the SDK. It should *NOT* be checked into\n')
    xmlfile.write('     Version Control Systems. -->\n')
    xmlfile.write('    <property file="local.properties" />\n')
    xmlfile.write('\n')
    xmlfile.write('    <!-- The build.properties file can be created by you and is never touched\n')
    xmlfile.write("         by the 'android' tool. This is the place to change some of the\n")
    xmlfile.write('         default property values used by the Ant rules.\n')
    xmlfile.write('         Here are some properties you may want to change/update:\n')
    xmlfile.write('\n')
    xmlfile.write('         source.dir\n')
    xmlfile.write("             The name of the source directory. Default is 'src'.'\n")
    xmlfile.write('         out.dir\n')
    xmlfile.write("             The name of the output directory. Default is 'bin'.\n")
    xmlfile.write('\n')
    xmlfile.write('         Properties related to the SDK location or the project target should\n')
    xmlfile.write("         be updated using the 'android' tool with the 'update' action.\n")
    xmlfile.write('\n')
    xmlfile.write('         This file is an integral part of the build system for your\n')
    xmlfile.write('         application and should be checked into Version Control Systems.\n')
    xmlfile.write('\n')
    xmlfile.write('         -->\n')
    xmlfile.write('    <property file="build.properties" />\n')
    xmlfile.write('\n')
    xmlfile.write("    <!-- The default.properties file is created and updated by the 'android'\n")
    xmlfile.write('         tool, as well as ADT.\n')
    xmlfile.write('         This file is an integral part of the build system for your\n')
    xmlfile.write('         application and should be checked into Version Control Systems. -->\n')
    xmlfile.write('    <property file="default.properties" />\n')
    xmlfile.write('\n')
    xmlfile.write('    <!-- Custom Android task to deal with the project target, and import the\n')
    xmlfile.write('         proper rules.\n')
    xmlfile.write('         This requires ant 1.6.0 or above. -->\n')
    xmlfile.write('    <path id="android.antlibs">\n')
    xmlfile.write('        <pathelement path="${sdk.dir}/tools/lib/anttasks.jar" />\n')
    xmlfile.write('        <pathelement path="${sdk.dir}/tools/lib/sdklib.jar" />\n')
    xmlfile.write('        <pathelement path="${sdk.dir}/tools/lib/androidprefs.jar" />\n')
    xmlfile.write('    </path>\n')
    xmlfile.write('\n')
    xmlfile.write('    <taskdef name="setup"\n')
    xmlfile.write('        classname="com.android.ant.SetupTask"\n')
    xmlfile.write('        classpathref="android.antlibs" />\n')
    xmlfile.write('<!--\n')
    xmlfile.write('This rules file is meant to be imported by the custom Ant task:\n')
    xmlfile.write('com.android.ant.SetupTask\n')
    xmlfile.write('The following properties are put in place by the importing task:\n')
    xmlfile.write('android.jar, android.aidl, aapt, aidl, and dx\n')
    xmlfile.write('Additionnaly, the task sets up the following classpath reference:\n')
    xmlfile.write('  android.target.classpath\n')
    xmlfile.write('This is used by the compiler task as the boot classpath.\n')
    xmlfile.write(' -->\n')
    xmlfile.write('<!-- Custom tasks -->\n')
    xmlfile.write('<taskdef name="aapt"\n')
    xmlfile.write('classname="com.android.ant.AaptExecLoopTask"\n')
    xmlfile.write('classpathref="android.antlibs" />\n')
    xmlfile.write('<taskdef name="aidl"\n')
    xmlfile.write('classname="com.android.ant.AidlExecTask"\n')
    xmlfile.write('classpathref="android.antlibs" />\n')
    xmlfile.write('<taskdef name="apkbuilder"\n')
    xmlfile.write('classname="com.android.ant.ApkBuilderTask"\n')
    xmlfile.write('classpathref="android.antlibs" />\n')
    xmlfile.write(' <taskdef name="xpath"\n')
    xmlfile.write(' classname="com.android.ant.XPathTask"\n')
    xmlfile.write('classpathref="android.antlibs" />\n')
    xmlfile.write('<taskdef name="if"\n')
    xmlfile.write('classname="com.android.ant.IfElseTask"\n')
    xmlfile.write('classpathref="android.antlibs" />\n')
    xmlfile.write('<!-- Properties -->\n')
    xmlfile.write('<!-- Tells adb which device to target. You can change this from the command line\n')
    xmlfile.write('by invoking "ant -Dadb.device.arg=-d" for device "ant -Dadb.device.arg=-e" for\n')
    xmlfile.write('the emulator. -->\n')
    xmlfile.write('<property name="adb.device.arg" value="" />\n')
    xmlfile.write('<property name="android.tools.dir" location="${sdk.dir}/tools" />\n')
    xmlfile.write('<property name="android.platform.tools.dir" location="${sdk.dir}/platform-tools" />\n')
    xmlfile.write('<!-- Name of the application package extracted from manifest file -->\n')
    xmlfile.write(' <xpath input="AndroidManifest.xml" expression="/manifest/@package"\n')
    xmlfile.write('output="manifest.package" />\n')
    xmlfile.write('<!-- Value of the hasCode attribute (Application node) extracted from manifest file -->\n')
    xmlfile.write('<xpath input="AndroidManifest.xml" expression="/manifest/application/@android:hasCode"\n')
    xmlfile.write('output="manifest.hasCode" default="true"/>\n')
    xmlfile.write('<!-- Input directories -->\n')
    xmlfile.write('    <property name="build.log.dir" location="${basedir}/buildlogs"/>\n')
    xmlfile.write('<property name="source.dir" value="src" />\n')
    xmlfile.write('<property name="source.absolute.dir" location="${source.dir}" />\n')
    xmlfile.write('<property name="gen.dir" value="gen" />\n')
    xmlfile.write('<property name="gen.absolute.dir" location="${gen.dir}" />\n')
    xmlfile.write('<property name="resource.dir" value="res" />\n')
    xmlfile.write('<property name="resource.absolute.dir" location="${resource.dir}" />\n')
    xmlfile.write('<property name="asset.dir" value="assets" />\n')
    xmlfile.write('<property name="asset.absolute.dir" location="${asset.dir}" />\n')
    xmlfile.write('   <property name="assets.from.dir" location="'+bookFolder+bookID+'/Uniberg" />\n')

    # Update source path
    csspath= bookFolder+bookID+"/Uniberg/"

    xmlfile.write('<!-- Directory for the third party java libraries -->\n')
    xmlfile.write('<property name="jar.libs.dir" value="libs" />\n')
    xmlfile.write('<property name="jar.libs.absolute.dir" location="${jar.libs.dir}" />\n')
    xmlfile.write('<!-- create a path with all the jar files, from the main project and the\n')
    xmlfile.write('libraries -->\n')
    xmlfile.write('<path id="jar.libs.ref">\n')
    xmlfile.write('<fileset dir="${jar.libs.absolute.dir}" includes="*.jar" />\n')
    xmlfile.write(' <path refid="project.libraries.jars" />\n') 
    xmlfile.write('</path>\n')
    xmlfile.write('<!-- Directory for the native libraries -->\n')
    xmlfile.write('<property name="native.libs.dir" value="libs" />\n')
    xmlfile.write('<property name="native.libs.absolute.dir" location="${native.libs.dir}" />\n')
    xmlfile.write('<!-- Output directories -->\n')
    xmlfile.write('<property name="out.dir" value="APPS_IN_PROCESS" />\n')
    xmlfile.write('<property name="out.absolute.dir" location="${out.dir}" />\n')
    xmlfile.write(' <property name="out.classes.dir" value="${out.absolute.dir}/classes" />\n')
    xmlfile.write('<property name="out.classes.absolute.dir" location="${out.classes.dir}" />\n')
    xmlfile.write(' <!-- Intermediate files -->\n')
    xmlfile.write('<property name="dex.file.name" value="classes.dex" />\n')
    xmlfile.write(' <property name="intermediate.dex.file"\n')
    xmlfile.write('              location="${out.absolute.dir}/${dex.file.name}" />\n')
    xmlfile.write('<property name="resource.package.file.name"\n')
    xmlfile.write('            value="'+bookID+'.ap_" />\n')
    xmlfile.write(' <!-- The final package file to generate\n')
    xmlfile.write('These can be overridden by setting them earlier to\n')
    xmlfile.write(' different values -->\n')
    xmlfile.write('<property name="out.debug.unaligned.file"\n')
    xmlfile.write('              location="${out.absolute.dir}/'+bookID+'-unaligned.apk" />\n')
    xmlfile.write('<property name="out.debug.file"\n')
    xmlfile.write('              location="${out.absolute.dir}/'+bookID+'.apk" />\n')
    xmlfile.write('<property name="out.unsigned.file.name"\n')
    xmlfile.write('             value="${ant.project.name}-unsigned.apk" />\n')
    xmlfile.write('<property name="out.unsigned.file"\n')
    xmlfile.write('             location="${out.absolute.dir}/${out.unsigned.file.name}" />\n')
    xmlfile.write('<property name="out.unaligned.file.name"\n')
    xmlfile.write('             value="${ant.project.name}-unaligned.apk" />\n')
    xmlfile.write('<property name="out.unaligned.file"\n')
    xmlfile.write('             location="${out.absolute.dir}/${out.unaligned.file.name}" />\n')
    xmlfile.write('<property name="out.release.file.name"\n')
    xmlfile.write('           value="'+bookID+'-release.apk" />\n')
    xmlfile.write('<property name="out.release.file"\n')
    xmlfile.write('            location="${out.absolute.dir}/${out.release.file.name}" />\n')
    xmlfile.write("<!-- set some properties used for filtering/override. If those weren't defined\n")
    xmlfile.write('  before, then this will create them with empty values, which are then ignored \n')
    xmlfile.write('by the custom tasks receiving them. -->\n')
    xmlfile.write('<property name="version.code" value="" />\n')
    xmlfile.write('<property name="aapt.resource.filter" value="" />\n')
    xmlfile.write('<property name="filter.abi" value="" />\n')
    xmlfile.write('\n')
    xmlfile.write('<!-- compilation options -->\n')
    xmlfile.write('<property name="java.encoding" value="ascii" />\n')
    xmlfile.write('<property name="java.target" value="1.5" />\n')
    xmlfile.write('<property name="java.source" value="1.5" />\n')
    xmlfile.write('\n')
    xmlfile.write('<!-- Verbosity -->\n')
    xmlfile.write('<property name="verbose" value="false" />\n')
    xmlfile.write("    <!-- This is needed by emma as it uses multilevel verbosity instead of simple 'true' or 'false'\n")
    xmlfile.write(' The property verbosity is not user configurable and depends exclusively on verbose\n')
    xmlfile.write('       value.-->\n')
    xmlfile.write(' <condition property="verbosity" value="verbose" else="quiet">\n')
    xmlfile.write('  <istrue value="${verbose}" />\n')
    xmlfile.write(' </condition>\n')
    xmlfile.write("<!-- This is needed to switch verbosity of zipalign. Depends exclusively on 'verbose\n")
    xmlfile.write('-->\n')
    xmlfile.write('<condition property="v.option" value="-v" else="">\n')
    xmlfile.write('<istrue value="${verbose}" />\n')
    xmlfile.write('</condition>\n')
    xmlfile.write("<!-- This is needed to switch verbosity of dx. Depends exclusively on 'verbose' -->\n")
    xmlfile.write('<condition property="verbose.option" value="--verbose" else="">\n')
    xmlfile.write('  <istrue value="${verbose}" />\n')
    xmlfile.write('</condition>\n')
    xmlfile.write('<!-- properties for signing in release mode -->\n')
    xmlfile.write('<condition property="has.keystore">\n')
    xmlfile.write('<and>\n')
    xmlfile.write('<isset property="key.store" />\n')
    xmlfile.write('<length string="${key.store}" when="greater" length="0" />\n')
    xmlfile.write('<isset property="key.alias" />\n')
    xmlfile.write('     </and>\n')
    xmlfile.write('</condition>\n')
    xmlfile.write('<condition property="has.password">\n')
    xmlfile.write('<and>\n')
    xmlfile.write('<isset property="has.keystore" />\n')
    xmlfile.write('<isset property="key.store.password" />\n')
    xmlfile.write('<isset property="key.alias.password" />\n')
    xmlfile.write('</and>\n')
    xmlfile.write('</condition>\n')
    xmlfile.write('<!-- Tools -->\n')
    xmlfile.write('<condition property="exe" value=".exe" else=""><os family="windows" /></condition>\n')
    xmlfile.write('<property name="adb" location="${android.platform.tools.dir}/adb${exe}" />\n')
    xmlfile.write('<property name="zipalign" location="${android.tools.dir}/zipalign${exe}" />\n')
    xmlfile.write('\n')
    xmlfile.write('<!-- Emma configuration -->\n')
    xmlfile.write('<property name="emma.dir" value="${sdk.dir}/tools/lib" />\n')
    xmlfile.write('<path id="emma.lib">\n')
    xmlfile.write('<pathelement location="${emma.dir}/emma.jar" />\n')
    xmlfile.write('<pathelement location="${emma.dir}/emma_ant.jar" />\n')
    xmlfile.write('</path>\n')
    xmlfile.write('<taskdef resource="emma_ant.properties" classpathref="emma.lib" />\n')
    xmlfile.write('  <!-- End of emma configuration -->\n')
    xmlfile.write('\n')
    xmlfile.write('<!-- Macros -->\n')
    xmlfile.write('\n')
    xmlfile.write('<!-- Configurable macro, which allows to pass as parameters output directory,\n')
    xmlfile.write('output dex filename and external libraries to dex (optional) -->\n')
    xmlfile.write('<macrodef name="dex-helper">\n')
    xmlfile.write('<element name="external-libs" optional="yes" />\n')
    xmlfile.write('<element name="extra-parameters" optional="yes" />\n')
    xmlfile.write('     <sequential>\n')
    xmlfile.write('    <!-- sets the primary input for dex. If a pre-dex task sets it \n')
    xmlfile.write('something else this has no effect -->\n')
    xmlfile.write('<property name="out.dex.input.absolute.dir" value="${out.classes.absolute.dir}" />\n')
    xmlfile.write('\n')
    xmlfile.write('<!-- set the secondary dx input: the project (and library) jar files\n')
    xmlfile.write('If a pre-dex task sets it to something else this has no effect -->\n')
    xmlfile.write('<if>\n')
    xmlfile.write('<condition>\n')
    xmlfile.write('<isreference refid="out.dex.jar.input.ref" />\n')
    xmlfile.write('</condition>\n')
    xmlfile.write('<else>\n')
    xmlfile.write('<path id="out.dex.jar.input.ref">\n')
    xmlfile.write('<path refid="jar.libs.ref" />\n')
    xmlfile.write('</path>\n')
    xmlfile.write('</else>\n')
    xmlfile.write('</if>\n')
    xmlfile.write('\n')
    xmlfile.write('<echo>Converting compiled files and external libraries into \n') 
    xmlfile.write('${intermediate.dex.file}...</echo>\n')
    xmlfile.write('<apply executable="${dx}" failonerror="true" parallel="true">\n')
    xmlfile.write('<arg value="--dex" />\n')
    xmlfile.write('<arg value="--output=${intermediate.dex.file}" />\n')
    xmlfile.write('<extra-parameters />\n')
    xmlfile.write('<arg line="${verbose.option}" />\n')
    xmlfile.write('<arg path="${out.dex.input.absolute.dir}" />\n')
    xmlfile.write('<path refid="out.dex.jar.input.ref" />\n')
    xmlfile.write('<external-libs />\n')
    xmlfile.write('</apply>\n')
    xmlfile.write('</sequential>\n')
    xmlfile.write('</macrodef>\n')
    xmlfile.write('\n')
    xmlfile.write(' <!-- This is macro that enable passing variable list of external jar files to \n')
    xmlfile.write('     Example of \n')
    xmlfile.write('     <package-helper output.filepath="/path/to/foo.apk">\n')
    xmlfile.write('<extra-jars>\n')
    xmlfile.write('<jarfolder path="my_jars" />\n')
    xmlfile.write('<jarfile path="foo/bar.jar" />\n')
    xmlfile.write('<jarfolder path="your_jars" />\n')
    xmlfile.write('</extra-jars>\n')
    xmlfile.write('</package-helper> -->\n')
    xmlfile.write('<macrodef name="package-helper">\n')
    xmlfile.write('<attribute name="output.filepath" />\n')
    xmlfile.write('<element name="extra-jars" optional="yes" />\n')
    xmlfile.write('<sequential>\n')
    xmlfile.write('<apkbuilder \n')
    xmlfile.write('outfolder="${out.absolute.dir}"\n')
    xmlfile.write('resourcefile="${resource.package.file.name}"\n')
    xmlfile.write('apkfilepath="@{output.filepath}"\n')
    xmlfile.write('debugpackaging="${build.packaging.debug}"\n')
    xmlfile.write('debugsigning="${build.signing.debug}"\n')
    xmlfile.write('abifilter="${filter.abi}"\n')
    xmlfile.write('verbose="${verbose}"\n')
    xmlfile.write('hascode="${manifest.hasCode}">\n')
    xmlfile.write('<dex path="${intermediate.dex.file}"/>\n')
    xmlfile.write('<sourcefolder path="${source.absolute.dir}"/>\n')
    xmlfile.write('             <sourcefolder refid="project.libraries.src"/>\n')
    xmlfile.write('<jarfolder path="${jar.libs.absolute.dir}" />\n')
    xmlfile.write('<jarfolder refid="project.libraries.libs" />\n')
    xmlfile.write('<nativefolder path="${native.libs.absolute.dir}" />\n')
    xmlfile.write('<nativefolder refid="project.libraries.libs" />\n')
    xmlfile.write('<extra-jars/>\n')
    xmlfile.write('</apkbuilder>\n')
    xmlfile.write('</sequential>\n')
    xmlfile.write('</macrodef>\n')
    xmlfile.write('\n')
    xmlfile.write('<!-- This is macro which zipaligns in.package and outputs it to out.package. Used by \n')
    xmlfile.write('targets\n')
    xmlfile.write('debug, -debug-with-emma and release.-->\n')
    xmlfile.write('<macrodef name="zipalign-helper">\n')
    xmlfile.write('<attribute name="in.package" />\n')
    xmlfile.write('<attribute name="out.package" />\n')
    xmlfile.write('<sequential>\n')
    xmlfile.write('<echo>Running zip align on final apk...</echo>\n')
    xmlfile.write('<exec executable="${zipalign}" failonerror="true">\n')
    xmlfile.write('<arg line="${v.option}" />\n')
    xmlfile.write('<arg value="-f" />\n')
    xmlfile.write('<arg value="4" />\n')
    xmlfile.write('<arg path="@{in.package}" />\n')
    xmlfile.write('<arg path="@{out.package}" />\n')
    xmlfile.write('         </exec>\n')
    xmlfile.write('     </sequential>\n')
    xmlfile.write('</macrodef>\n')
    xmlfile.write('\n')
    xmlfile.write(' <!-- This is macro used only for sharing code among two targets, -install \n')
    xmlfile.write('     -install-with-emma which do exactly the same but differ in dependencies -->\n')
    xmlfile.write(' <macrodef name="install-helper">\n')
    xmlfile.write('<sequential>\n')
    xmlfile.write('<echo>Installing ${out.debug.file} onto default emulator or device...</echo>\n')
    xmlfile.write('<exec executable="${adb}" failonerror="true">\n')
    xmlfile.write('<arg line="${adb.device.arg}" />\n')
    xmlfile.write('<arg value="install" />\n')
    xmlfile.write('<arg value="-r" />\n')
    xmlfile.write('<arg path="${out.debug.file}" />\n')
    xmlfile.write('</exec>\n')
    xmlfile.write('</sequential>\n')
    xmlfile.write(' </macrodef>\n')
    xmlfile.write('\n')
    xmlfile.write('  <!-- Rules -->\n')
    xmlfile.write('\n')
    xmlfile.write('<!--Edit Starts-->\n')
    xmlfile.write('	<target name="delete">\n')
    xmlfile.write('	<mkdir dir="${build.log.dir}"/>\n')
    xmlfile.write('     <tstamp>\n')
    xmlfile.write('     <format property="timestamp" pattern="MM-dd-yyyy"/>\n')
    xmlfile.write('     </tstamp>\n')
    xmlfile.write('	 <property name="build.log.filename" value="build_${timestamp}.log"/>\n')
    xmlfile.write('	 <record name="${build.log.dir}/${build.log.filename}" loglevel="verbose" append="true"/>\n')
    xmlfile.write('	 <echo message="Building book :'+bookID+'"/>\n')
    xmlfile.write('	 <delete includeemptydirs="true">\n')
    xmlfile.write('   <fileset dir="${asset.dir}" defaultexcludes="false">\n')
    xmlfile.write('  <include name="**/**/**" />\n')
    xmlfile.write(' </fileset>\n')
    xmlfile.write(' </delete>\n')
    xmlfile.write('	 <delete includeemptydirs="true">\n')
    xmlfile.write('   <fileset dir="${gen.dir}" defaultexcludes="false">\n')
    xmlfile.write('  <include name="**/**/**" />\n')
    xmlfile.write(' </fileset>\n')
    xmlfile.write(' </delete>\n')
    xmlfile.write(' </target>\n')
    xmlfile.write(' <target name="copy" depends="delete">\n')
    xmlfile.write(' <mkdir dir="${asset.dir}"/>\n')
    xmlfile.write(' <copy todir="${asset.dir}">\n')
    xmlfile.write(' <fileset dir="${assets.from.dir}">\n')
    xmlfile.write(' <include name="**/**/*.*"/>\n')
    xmlfile.write(' </fileset>\n')
    xmlfile.write(' </copy>\n')
    xmlfile.write(' <delete> \n')
    xmlfile.write(' <fileset dir="." includes="res/drawable/*_icon.png"/>\n')
    xmlfile.write(' </delete>\n')
    bookIDwithunderscore = bookID.replace('-','_')
    bookIDwithunderscore = bookIDwithunderscore.lower()

    #xmlfile.write(' <rename src="${asset.dir}/OEBPS/images/'+bookID+'_ICON.png" dest="${asset.dir}/OEBPS/images/'+bookIDwithunderscore+'_icon.png" />\n')
    #xmlfile.write('  <copy file="${asset.dir}/OEBPS/images/'+bookIDwithunderscore+'_icon.png" todir="res/drawable" />\n')
    #pdb.set_trace()
    sourcepath = bookFolder+bookID+"/Uniberg/OEBPS/"
    #sourcepath = "assets/OEBPS"

    if os.path.exists(sourcepath):
        xmlfile.write('  <echo message="Comming into IFFFFFFF"/>\n')
        #if png file does not exist, try jpg file instead.
        iconFile = sourcepath+'images/'+bookID+'_ICON.png'
        if os.path.isfile(iconFile):
            #convert the file to png, in case some file extension is png but actually is a jpg.
            convertImageToPng(iconFile,iconFile) 
            xmlfile.write('  <rename src="${asset.dir}/OEBPS/images/'+bookID+'_ICON.png" dest="${asset.dir}/OEBPS/images/'+bookIDwithunderscore+'_icon.png" />\n')
            xmlfile.write('  <copy file="${asset.dir}/OEBPS/images/'+bookIDwithunderscore+'_icon.png" todir="res/drawable" />\n')
        else:
            iconFile = sourcepath+'images/'+bookID+'_ICON.jpg'
            #convert the file to jpg, in case some file extension is jpg but actually is a png.
            convertImageToJpg(iconFile,iconFile) 
            xmlfile.write('  <rename src="${asset.dir}/OEBPS/images/'+bookID+'_ICON.jpg" dest="${asset.dir}/OEBPS/images/'+bookIDwithunderscore+'_icon.jpg" />\n')
            xmlfile.write('  <copy file="${asset.dir}/OEBPS/images/'+bookIDwithunderscore+'_icon.jpg" todir="res/drawable" />\n')
        xmlfile.write(' <replaceregexp flags="g" byline="false">\n')
        xmlfile.write(' <regexp pattern="private static final String BOOK_URL = &quot;file:///android_asset/(.*)&quot;;" /> \n')
        xmlfile.write('   <substitution expression="private static final String BOOK_URL = &quot;file:///android_asset/OEBPS/&quot;;" />\n')
        xmlfile.write('   <fileset dir="src" includes="**/PageManager.java" /> \n')
        xmlfile.write('		</replaceregexp>\n')
        xmlfile.write('	 <delete includeemptydirs="true">\n')
        xmlfile.write('   <fileset dir="${asset.dir}/OEBPS/" defaultexcludes="false">\n')
        xmlfile.write('  <include name="**/**/*.js" />\n')
        xmlfile.write(' </fileset>\n')
        xmlfile.write(' </delete>\n')
        csspath = csspath+"OEBPS/"							
				 
    else:
        sourcepath = bookFolder+bookID+"/Uniberg/OPS/"
        xmlfile.write('	 <echo message="Comming Else...."/>\n')
        iconFile = sourcepath+'images/'+bookID+'_ICON.png'
        if os.path.isfile(iconFile):
            convertImageToPng(iconFile,iconFile) 
            xmlfile.write(' <rename src="${asset.dir}/OPS/images/'+bookID+'_ICON.png" dest="${asset.dir}/OPS/images/'+bookIDwithunderscore+'_icon.png" />\n')
            xmlfile.write(' <copy file="${asset.dir}/OPS/images/'+bookIDwithunderscore+'_icon.png" todir="res/drawable" />\n')
        else:
            iconFile = sourcepath+'images/'+bookID+'_ICON.jpg'
            convertImageToPng(iconFile,iconFile) 
            xmlfile.write(' <rename src="${asset.dir}/OPS/images/'+bookID+'_ICON.jpg" dest="${asset.dir}/OPS/images/'+bookIDwithunderscore+'_icon.jpg" />\n')
            xmlfile.write(' <copy file="${asset.dir}/OPS/images/'+bookIDwithunderscore+'_icon.jpg" todir="res/drawable" />\n')
        xmlfile.write(' <replaceregexp flags="g" byline="false">\n')
        xmlfile.write(' <regexp pattern="private static final String BOOK_URL = &quot;file:///android_asset/(.*)&quot;;" /> \n')
        xmlfile.write('   <substitution expression="private static final String BOOK_URL = &quot;file:///android_asset/OPS/&quot;;" />\n')
        xmlfile.write('   <fileset dir="src" includes="**/PageManager.java" /> \n')
        xmlfile.write('		</replaceregexp>\n')
        xmlfile.write('	 <delete includeemptydirs="true">\n')
        xmlfile.write('   <fileset dir="${asset.dir}/OPS/" defaultexcludes="false">\n')
        xmlfile.write('  <include name="**/**/*.js" />\n')
        xmlfile.write(' </fileset>\n')
        xmlfile.write(' </delete>\n')
        csspath = csspath+"OPS/"
        #sourcepath = "C:/Program Files/Vidyasagar/EPUBS4/"+bookID+"/Uniberg/OPS/"  

    #print "*****SOURCEPATH=",sourcepath
    xmlfile.write('  </target>\n')
    xmlfile.write('	<target name="IcebergBuild" depends="copy" description="replacing the import statement and application pakage name" >\n')
    xmlfile.write('\n')
    xmlfile.write('	<!--change the import statements .java -->\n')
    xmlfile.write('		<replaceregexp flags="g" byline="false">\n')
    xmlfile.write('		    <regexp pattern="import com.forside.android(.*).R;" /> \n')
    bookIDnodash = bookID.replace('-','')
    xmlfile.write('		    <substitution expression="import com.forside.android.'+bookIDnodash+'.R;" />\n')
    xmlfile.write('		    <fileset dir="src" includes="**/*.java" /> \n')
    xmlfile.write('		</replaceregexp>\n')
    xmlfile.write('		<!-- change the package name in AndroidManifest -->\n')
    xmlfile.write('		<replaceregexp flags="g" byline="false">\n')
    xmlfile.write('		    <regexp pattern="package=&quot;com.forside.android(.*)&quot;" /> \n')
    xmlfile.write('		    <substitution expression="package=&quot;com.forside.android.'+bookIDnodash+'&quot;" />\n')
    xmlfile.write('		    <fileset dir="" includes="AndroidManifest.xml" /> \n')
    xmlfile.write('		</replaceregexp>\n')
    xmlfile.write('	\n')
    xmlfile.write('		<replaceregexp flags="g" byline="false">\n')
    xmlfile.write('		    <regexp pattern="android:icon=&quot;@drawable/(.*)&quot;" /> \n')
    xmlfile.write('		    <substitution expression="android:icon=&quot;@drawable/'+bookIDwithunderscore+'_icon&quot;" />\n')
    xmlfile.write('		    <fileset dir="" includes="AndroidManifest.xml" /> \n')
    xmlfile.write('		</replaceregexp>\n')
    xmlfile.write('	\n')
    formattitle = bookID[0:bookID.index("-")];
    xmlfile.write('		<replaceregexp flags="g" byline="false">\n')
    xmlfile.write('		     <regexp pattern="android:label=&quot;(.*)&quot;" /> \n')
    xmlfile.write('		    <substitution expression="android:label=&quot;'+formattitle+'&quot;" />\n')
    xmlfile.write('		    <fileset dir="" includes="AndroidManifest.xml" /> \n')
    xmlfile.write('		</replaceregexp>\n')
    xmlfile.write('	\n')
    xmlfile.write('		 <echo>Edit has been completed</echo>\n')
    xmlfile.write('	</target>\n')
    xmlfile.write('	<!--Edit Ends-->\n')
    xmlfile.write("<!-- Creates the output directories if they don't exist yet. -->\n")
    xmlfile.write('<target name="-dirs" depends="IcebergBuild">\n')
    xmlfile.write('<echo>Creating output directories if needed...</echo>\n')
    xmlfile.write('<mkdir dir="${resource.absolute.dir}" />\n')
    xmlfile.write('<mkdir dir="${jar.libs.absolute.dir}" />\n')
    xmlfile.write('<mkdir dir="${out.absolute.dir}" />\n')
    xmlfile.write('<if condition="${manifest.hasCode}">\n')
    xmlfile.write('<then>\n')
    xmlfile.write('         <mkdir dir="${gen.absolute.dir}" />\n')
    xmlfile.write('         <mkdir dir="${out.classes.absolute.dir}" />\n')
    xmlfile.write('     </then>\n')
    xmlfile.write('    </if>\n')
    xmlfile.write(' </target>\n')
    xmlfile.write('\n')
    xmlfile.write('<!-- empty default pre-build target. Create a similar target \n')
    xmlfile.write("     your build.xml and it'll be called instead of this one. -->\n")
    xmlfile.write(' <target name="-pre-build"/>\n')
    xmlfile.write('\n')
    xmlfile.write(' <!-- Generates the R.java file for this projects resources. -->\n')
    xmlfile.write(' <target name="-resource-src" depends="-dirs, -pre-build">\n')
    xmlfile.write('    <if condition="${manifest.hasCode}">\n')
    xmlfile.write('      <then>\n')
    xmlfile.write('           <echo>Generating R.java / Manifest.java from the resources...</echo>\n')
    xmlfile.write('           <aapt executable="${aapt}"\n')
    xmlfile.write('                   command="package"\n')
    xmlfile.write('                   verbose="${verbose}"\n')
    xmlfile.write('                   manifest="AndroidManifest.xml"\n')
    xmlfile.write('                   androidjar="${android.jar}"\n')
    xmlfile.write('                  rfolder="${gen.absolute.dir}">\n')
    xmlfile.write('              <res path="${resource.absolute.dir}" />\n')
    xmlfile.write('          </aapt>\n')
    xmlfile.write('      </then>\n')
    xmlfile.write('      <else>\n')
    xmlfile.write('         <echo>hasCode = false. Skipping...</echo>\n')
    xmlfile.write('    </else>\n')
    xmlfile.write(' </if>\n')
    xmlfile.write(' </target>\n')
    xmlfile.write('\n')
    xmlfile.write(' <!-- Generates java classes from .aidl files. -->\n')
    xmlfile.write('<target name="-aidl" depends="-dirs">\n')
    xmlfile.write(' <if condition="${manifest.hasCode}">\n')
    xmlfile.write('    <then>\n')
    xmlfile.write('       <echo>Compiling aidl files into Java classes...</echo>\n')
    xmlfile.write('      <aidl executable="${aidl}" framework="${android.aidl}"\n')
    xmlfile.write('               genFolder="${gen.absolute.dir}">\n')
    xmlfile.write('             <source path="${source.absolute.dir}"/>\n')
    xmlfile.write('             <source refid="project.libraries.src"/>\n')
    xmlfile.write('         </aidl>\n')
    xmlfile.write('     </then>\n')
    xmlfile.write('       <else>\n')
    xmlfile.write('          <echo>hasCode = false. Skipping...</echo>\n')
    xmlfile.write('       </else>\n')
    xmlfile.write('    </if>\n')
    xmlfile.write('  </target>\n')
    xmlfile.write('\n')
    xmlfile.write('  <!-- empty default pre-compile target. Create a similar target \n')
    xmlfile.write('       your build.xml and it all be called instead of this one. -->\n')
    xmlfile.write('  <target name="-pre-compile"/>\n')
    xmlfile.write('\n')
    xmlfile.write('  <!-- Compiles this projects .java files into .class files. -->\n')
    xmlfile.write(' <target name="compile" depends="-resource-src, -aidl, -pre-compile"\n')
    xmlfile.write('           description="Compiles projects .java files into .class files">\n')
    xmlfile.write(' <if condition="${manifest.hasCode}">\n')
    xmlfile.write('  <then>\n')
    xmlfile.write('      <!-- If android rules are used for a test project, its classpath should include \n')
    xmlfile.write('          tested projects location -->\n')
    xmlfile.write('     <condition property="extensible.classpath"\n')
    xmlfile.write('             value="${tested.project.absolute.dir}/bin/classes"\n')
    xmlfile.write('             else=".">\n')
    xmlfile.write('        <isset property="tested.project.absolute.dir" />\n')
    xmlfile.write('    </condition>\n')
    xmlfile.write('     <condition property="extensible.libs.classpath"\n')
    xmlfile.write('               value="${tested.project.absolute.dir}/libs"\n')
    xmlfile.write('              else="${jar.libs.dir}">\n')
    xmlfile.write('           <isset property="tested.project.absolute.dir" />\n')
    xmlfile.write('      </condition>\n')
    xmlfile.write('      <javac encoding="${java.encoding}"\n')
    xmlfile.write('              source="${java.source}" target="${java.target}"\n')
    xmlfile.write('              debug="true" extdirs=""\n')
    xmlfile.write('                destdir="${out.classes.absolute.dir}"\n')
    xmlfile.write('               bootclasspathref="android.target.classpath"\n')
    xmlfile.write('                verbose="${verbose}"\n')
    xmlfile.write('                classpath="${extensible.classpath}"\n')
    xmlfile.write('                classpathref="jar.libs.ref">\n')
    xmlfile.write('           <src path="${source.absolute.dir}" />\n')
    xmlfile.write('            <src path="${gen.absolute.dir}" />\n')
    xmlfile.write('            <src refid="project.libraries.src" />\n')
    xmlfile.write('             <classpath>\n')
    xmlfile.write('                <fileset dir="${extensible.libs.classpath}" includes="*.jar" />\n')
    xmlfile.write('              </classpath>\n')
    xmlfile.write('         </javac>\n')
    xmlfile.write('     </then>\n')
    xmlfile.write('       <else>\n')
    xmlfile.write('         <echo>hasCode = false. Skipping...</echo>\n')
    xmlfile.write('        </else>\n')
    xmlfile.write('   </if>\n')
    xmlfile.write(' </target>\n')
    xmlfile.write(' <!-- empty default post-compile target. Create a similar target in\n')
    xmlfile.write('    your build.xml and it all be called instead of this one. -->\n')
    xmlfile.write(' <target name="-post-compile"/>\n')
    xmlfile.write('\n')
    xmlfile.write(' <!-- Obfuscate \n')
    xmlfile.write('  This is only active in release builds when proguard.config is \n')
    xmlfile.write('  in default.properties.\n')
    xmlfile.write('\n')
    xmlfile.write('  To replace Proguard with a different obfuscation engine:\n')
    xmlfile.write('  Override the following targets in your build.xml, before the call to <setup>\n')
    xmlfile.write('      -release-obfuscation-check\n')
    xmlfile.write('         Check whether obfuscation should happen, and put the result in a property.\n')
    xmlfile.write('     -debug-obfuscation-check\n')
    xmlfile.write('         Obfuscation should not happen. Set the same property to false.\n')
    xmlfile.write('     -obfuscate\n')
    xmlfile.write('         ** Make sure unless="do.not.compile" is used in the target definition **\n')
    xmlfile.write('         check if the property set in -debug/release-obfuscation-check is set to true.\n')
    xmlfile.write('          If true:\n')
    xmlfile.write('              Perform obfuscation\n')
    xmlfile.write('           Set property out.dex.input.absolute.dir to be the output of the obfuscation\n')
    xmlfile.write(' -->\n')
    xmlfile.write(' <target name="-obfuscate" unless="do.not.compile">\n')
    xmlfile.write(' <if condition="${proguard.enabled}">\n')
    xmlfile.write('  <then>\n')
    xmlfile.write('   <property name="obfuscate.absolute.dir" location="${out.absolute.dir}/proguard" />\n')
    xmlfile.write('   <property name="preobfuscate.jar.file" \n')
    xmlfile.write('value="${obfuscate.absolute.dir}/original.jar" />\n')
    xmlfile.write('  <property name="obfuscated.jar.file" \n')
    xmlfile.write(' value="${obfuscate.absolute.dir}/obfuscated.jar" />\n')
    xmlfile.write('  <!-- input for dex will be proguards output -->\n')
    xmlfile.write('  <property name="out.dex.input.absolute.dir" \n')
    xmlfile.write(' value="${obfuscated.jar.file}" />\n')
    xmlfile.write('  <!-- Add Proguard Tasks -->\n')
    xmlfile.write('  <property name="proguard.jar" \n')
    xmlfile.write(' location="${android.tools.dir}/proguard/lib/proguard.jar" />\n')
    xmlfile.write('   <taskdef name="proguard" classname="proguard.ant.ProGuardTask"\n')  
    xmlfile.write('classpath="${proguard.jar}" />\n')
    xmlfile.write('   <!-- Set the android classpath Path object into a single property. It all be\n')
    xmlfile.write('        all the jar files separated by a platform path-separator.\n')
    xmlfile.write('   -->\n')
    xmlfile.write('  <property name="android.libraryjars" refid="android.target.classpath"/>\n')
    xmlfile.write('   <!-- Build a path object with all the jar files that must be obfuscated.\n')
    xmlfile.write('       This include the project compiled source code and any 3rd party jar\n')
    xmlfile.write('       files. -->\n')
    xmlfile.write('  <path id="project.jars.ref">\n')
    xmlfile.write('      <pathelement location="${preobfuscate.jar.file}" />\n')
    xmlfile.write('      <path refid="jar.libs.ref" />\n')
    xmlfile.write('  </path>\n')
    xmlfile.write('  <!-- Set the project jar files Path object into a single property. It all be\n')
    xmlfile.write('       all the jar files separated by a platform path-separator.\n')
    xmlfile.write('  -->\n')
    xmlfile.write('   <property name="project.jars" refid="project.jars.ref" />\n')
    xmlfile.write('   <mkdir dir="${obfuscate.absolute.dir}" />\n')
    xmlfile.write('   <delete file="${preobfuscate.jar.file}"/>\n')
    xmlfile.write('    <delete file="${obfuscated.jar.file}"/>\n')
    xmlfile.write('    <jar basedir="${out.classes.dir}" destfile="${preobfuscate.jar.file}" />\n')
    xmlfile.write('   <proguard>\n')
    xmlfile.write('         @${proguard.config}\n')
    xmlfile.write('         -injars ${project.jars}\n')
    xmlfile.write('         -outjars ${obfuscated.jar.file}\n')
    xmlfile.write('         -libraryjars ${android.libraryjars}\n')
    xmlfile.write('          -dump ${obfuscate.absolute.dir}/dump.txt\n')
    xmlfile.write('          -printseeds ${obfuscate.absolute.dir}/seeds.txt\n')
    xmlfile.write('         -printusage ${obfuscate.absolute.dir}/usage.txt\n')
    xmlfile.write('         -printmapping ${obfuscate.absolute.dir}/mapping.txt\n')
    xmlfile.write('       </proguard>\n')
    xmlfile.write('     </then>\n')
    xmlfile.write('    </if>\n')
    xmlfile.write('  </target>\n')
    xmlfile.write(' <!-- Converts this projects .class files into .dex files -->\n')
    xmlfile.write('  <target name="-dex" depends="compile, -post-compile, -obfuscate"\n')
    xmlfile.write('      unless="do.not.compile">\n')
    xmlfile.write(' <if condition="${manifest.hasCode}">\n')
    xmlfile.write('     <then>\n')
    xmlfile.write('        <dex-helper />\n')
    xmlfile.write('    </then>\n')
    xmlfile.write('    <else>\n')
    xmlfile.write('        <echo>hasCode = false. Skipping...</echo>\n')
    xmlfile.write('  </else>\n')
    xmlfile.write(' </if>\n')
    xmlfile.write(' </target>\n')
    xmlfile.write('<!-- Puts the projects resources into the output package file\n')
    xmlfile.write('   This actually can create multiple resource package in case\n')
    xmlfile.write('  Some custom apk with specific configuration have been\n')
    xmlfile.write('  declared in default.properties.\n')
    xmlfile.write('     -->\n')
    xmlfile.write(' <target name="-package-resources">\n')
    xmlfile.write('   <echo>Packaging resources</echo>\n')
    xmlfile.write('<aapt executable="${aapt}"\n')
    xmlfile.write('       command="package"\n')
    xmlfile.write('       versioncode="${version.code}"\n')
    xmlfile.write('         debug="${build.packaging.debug}"\n')
    xmlfile.write('        manifest="AndroidManifest.xml"\n')
    xmlfile.write('         assets="${asset.absolute.dir}"\n')
    xmlfile.write('       androidjar="${android.jar}"\n')
    xmlfile.write('        apkfolder="${out.absolute.dir}"\n')
    xmlfile.write('        resourcefilename="${resource.package.file.name}"\n')
    xmlfile.write('        resourcefilter="${aapt.resource.filter}">\n')
    xmlfile.write('     <res path="${resource.absolute.dir}" />\n')
    xmlfile.write('    <!-- <nocompress /> forces no compression on any files in assets or res/raw -->\n')
    xmlfile.write(' <!-- <nocompress extension="xml" /> forces no compression on specific file \n')
    xmlfile.write(' extensions\n')
    xmlfile.write("in assets and  xmlfile.write('res/raw -->\n")
    xmlfile.write('    </aapt>\n')
    xmlfile.write(' </target>\n')
    xmlfile.write(' <!-- Packages the application and sign it with a debug key. -->\n')
    xmlfile.write(' <target name="-package-debug-sign" depends="-dex, -package-resources">\n')
    xmlfile.write('     <package-helper\n')
    xmlfile.write('             output.filepath="${out.debug.file}" />\n')
    xmlfile.write(' </target>\n')
    xmlfile.write(' <!-- Packages the application without signing it. -->\n')
    xmlfile.write(' <target name="-package-release" depends="-dex, -package-resources">\n')
    xmlfile.write('     <package-helper\n')
    xmlfile.write('             output.filepath="${out.unsigned.file}"/>\n')
    xmlfile.write('  </target>\n')
    xmlfile.write('<target name="-compile-tested-if-test" if="tested.project.dir" \n')
    xmlfile.write('unless="do.not.compile.again">\n')
    xmlfile.write('   <subant target="compile">\n')
    xmlfile.write('        <fileset dir="${tested.project.absolute.dir}" includes="build.xml" />\n')
    xmlfile.write('   </subant>\n')
    xmlfile.write(' </target>\n')
    xmlfile.write(' <target name="-debug-obfuscation-check">\n')
    xmlfile.write('   <!-- proguard is never enabled in debug mode -->\n')
    xmlfile.write('   <property name="proguard.enabled" value="false"/>\n')
    xmlfile.write(' </target>\n')
    xmlfile.write(' <target name="-set-debug-mode" depends="-debug-obfuscation-check">\n')
    xmlfile.write(' <!-- property only set in debug mode.\n')
    xmlfile.write('      Useful for if/unless attributes in target \n')
    xmlfile.write('      when using Ant before 1.8 -->\n')
    xmlfile.write(' <property name="build.mode.debug" value="true"/>\n')
    xmlfile.write(' <!-- whether the build is a debug build. always set. -->\n')
    xmlfile.write(' <property name="build.packaging.debug" value="true" />\n')
    xmlfile.write(' <!-- signing mode: debug -->\n')
    xmlfile.write('   <property name="build.signing.debug" value="true" />\n')
    xmlfile.write(' </target>\n')
    xmlfile.write(' <!-- Builds debug output package, provided all the necessary files are already dexed -->\n')
    xmlfile.write(' <target name="debug" depends="-set-debug-mode, -compile-tested-if-test, \n')
    xmlfile.write(' -package-debug-sign"\n')
    xmlfile.write('             description="Builds the application and signs it with a debug key.">\n')
    #xmlfile.write('   <zipalign-helper in.package="${out.debug.unaligned.file}"\n')
    #xmlfile.write('                             out.package="${out.debug.file}" />\n')
    xmlfile.write('    <echo>Debug Package: ${out.debug.file}</echo>\n')
    xmlfile.write(' </target>\n')
    xmlfile.write(' <!-- called through target release. Only executed if the keystore and\n')
    xmlfile.write('     key alias are known but not their password. -->\n')
    xmlfile.write(' <target name="-release-prompt-for-password" if="has.keystore" unless="has.password">\n')
    xmlfile.write('    <!-- Gets passwords -->\n')
    #xmlfile.write('    <input\n')
    #xmlfile.write('             message="Please enter keystore password (store:${key.store}):"\n')
    #xmlfile.write('             addproperty="key.store.password" />\n')
    #xmlfile.write('     <input\n')
    #xmlfile.write('             message="Please enter password for alias ${key.alias}:"\n')
    #xmlfile.write('             addproperty="key.alias.password" />\n')
    xmlfile.write(' </target>\n')
    xmlfile.write('  <!-- called through target release. Only executed if theres \n')
    xmlfile.write('       keystore/key alias set -->\n')
    xmlfile.write('  <target name="-release-nosign" unless="has.keystore">\n')
    xmlfile.write('      <echo>No key.store and key.alias properties found in build.properties.</echo>\n')
    xmlfile.write('      <echo>Please sign ${out.unsigned.file} manually</echo>\n')
    xmlfile.write('     <echo>and run zipalign from the Android SDK tools.</echo>\n')
    xmlfile.write(' </target>\n')
    xmlfile.write('  <target name="-release-obfuscation-check">\n')
    xmlfile.write('    <condition property="proguard.enabled" value="true" else="false">\n')
    xmlfile.write('         <and>\n')
    xmlfile.write('             <isset property="build.mode.release" />\n')
    xmlfile.write('            <isset property="proguard.config" />\n')
    xmlfile.write('         </and>\n')
    xmlfile.write('  </condition>\n')
    xmlfile.write('   <if condition="${proguard.enabled}">\n')
    xmlfile.write('       <then>\n')
    xmlfile.write("           <!-- Secondary dx input (jar files) is empty since all the\n')\n")
    xmlfile.write('                jar files will be in the obfuscated jar -->\n')
    xmlfile.write('             <path id="out.dex.jar.input.ref" />\n')
    xmlfile.write('       </then>\n')
    xmlfile.write('    </if>\n')
    xmlfile.write(' </target>\n')
    xmlfile.write(' <target name="-set-release-mode">\n')
    xmlfile.write('   <!-- release mode is only valid if the manifest does not explicitly\n')
    xmlfile.write('        set debuggable to true. default is false.\n')
    xmlfile.write('       We actually store build.packaging.debug, not build.release -->\n')
    xmlfile.write('   <xpath input="AndroidManifest.xml" \n')
    xmlfile.write('expression="/manifest/application/@android:debuggable"\n')
    xmlfile.write('          output="build.packaging.debug" default="false"/>\n')
    xmlfile.write('   <!-- signing mode: release -->\n')
    xmlfile.write('  <property name="build.signing.debug" value="false" />\n')
    xmlfile.write('  <if condition="${build.packaging.debug}">\n')
    xmlfile.write('     <then>\n')
    xmlfile.write('         <echo>*************************************************</echo>\n')
    xmlfile.write('         <echo>****  Android Manifest has debuggable=true   ****</echo>\n')
    xmlfile.write('         <echo>**** Doing DEBUG packaging with RELEASE keys ****</echo>\n')
    xmlfile.write('        <echo>*************************************************</echo>\n')
    xmlfile.write('   </then>\n')
    xmlfile.write('   <else>\n')
    xmlfile.write("        <!-- property only set in release mode\n')\n")
    xmlfile.write('             Useful for if/unless attributes in target node\n')
    xmlfile.write('              when using Ant before 1.8 -->\n')
    xmlfile.write('         <property name="build.mode.release" value="true"/>\n')
    xmlfile.write('      </else>\n')
    xmlfile.write('   </if>\n')
    xmlfile.write(' </target>\n')
    xmlfile.write('  <!-- This runs -package-release and -release-nosign first and then \n')
    xmlfile.write('      only if release-sign is true (set in -release-check,\n')
    xmlfile.write('     called by -release-no-sign)-->\n')
    xmlfile.write('<target name="release"\n')
    xmlfile.write('      depends="-set-release-mode, -release-obfuscation-check, -package-release,\n') 
    xmlfile.write('-release-prompt-for-password, -release-nosign"\n')
    xmlfile.write('      if="has.keystore"\n')
    xmlfile.write('       description="Builds the application. The generated apk file must be signed before\n')
    xmlfile.write('                  it is published.">\n')
    xmlfile.write(' <!-- Signs the APK -->\n')
    xmlfile.write('  <echo>Signing final apk...</echo>\n')
    xmlfile.write('  <signjar\n')
    xmlfile.write('          jar="${out.unsigned.file}"\n')
    xmlfile.write('         signedjar="${out.unaligned.file}"\n')
    xmlfile.write('         keystore="${key.store}"\n')
    xmlfile.write('         storepass="forside"\n')
    xmlfile.write('         alias="forside"\n')
    xmlfile.write('          keypass="${key.alias.password}"\n')
    xmlfile.write('        verbose="${verbose}" />\n')
    xmlfile.write(' <!-- Zip aligns the APK -->\n')
    xmlfile.write(' <zipalign-helper in.package="${out.unaligned.file}" out.package="${out.release.file}" />\n')
    xmlfile.write('  <echo>Release Package: ${out.release.file}</echo>\n')
    xmlfile.write(' </target>\n')
    xmlfile.write(' <target name="install" depends="debug"\n')
    xmlfile.write('  description="Installs/reinstalls the debug package onto a running\n')
    xmlfile.write('            emulator or device. If the application was previously installed,\n')
    xmlfile.write('          the signatures must match." >\n')
    xmlfile.write('  <install-helper />\n')
    xmlfile.write('</target>\n')
    xmlfile.write(' <target name="-uninstall-check">\n')
    xmlfile.write(' <condition property="uninstall.run">\n')
    xmlfile.write('      <isset property="manifest.package" />\n')
    xmlfile.write('   </condition>\n')
    xmlfile.write('  </target>\n')
    xmlfile.write('  <target name="-uninstall-error" depends="-uninstall-check" unless="uninstall.run">\n')
    xmlfile.write("    <echo>Unable to run 'ant uninstall', manifest.package property is not defined.\n")
    xmlfile.write('    </echo>\n')
    xmlfile.write(' </target>\n')
    xmlfile.write(' <!-- Uninstalls the package from the default emulator/device -->\n')
    xmlfile.write(' <target name="uninstall" depends="-uninstall-error" if="uninstall.run"\n')
    xmlfile.write('           description="Uninstalls the application from a running emulator or device.">\n')
    xmlfile.write(' <echo>Uninstalling ${manifest.package} from the default emulator or device...</echo>\n')
    xmlfile.write(' <exec executable="${adb}" failonerror="true">\n')
    xmlfile.write('   <arg line="${adb.device.arg}" />\n')
    xmlfile.write('   <arg value="uninstall" />\n')
    xmlfile.write('   <arg value="${manifest.package}" />\n')
    xmlfile.write('   </exec>\n')
    xmlfile.write(' </target>\n')
    xmlfile.write(' <target name="clean" description="Removes output files created by other targets.">\n')
    xmlfile.write('    <delete dir="${out.absolute.dir}" verbose="${verbose}" />\n')
    xmlfile.write('   <delete dir="${gen.absolute.dir}" verbose="${verbose}" />\n')
    xmlfile.write('</target>\n')
    xmlfile.write(' <!-- Targets for code-coverage measurement purposes, invoked from external file -->\n')
    xmlfile.write(' <!-- Emma-instruments tested project classes (compiles the tested project if necessary)\n')
    xmlfile.write('         and writes instrumented classes to ${instrumentation.absolute.dir}/classes -->\n')
    xmlfile.write(' <target name="-emma-instrument" depends="compile">\n')
    xmlfile.write('   <echo>Instrumenting classes from ${out.absolute.dir}/classes...</echo>\n')
    xmlfile.write('<!-- It only instruments class files, not any external libs -->\n')
    xmlfile.write(' <emma enabled="true">\n')
    xmlfile.write('  <instr verbosity="${verbosity}"\n')
    xmlfile.write('       mode="overwrite"\n')
    xmlfile.write('        instrpath="${out.absolute.dir}/classes"\n')
    xmlfile.write('        outdir="${out.absolute.dir}/classes">\n')
    xmlfile.write('  </instr>\n')
    xmlfile.write('  <!-- TODO: exclusion filters on R*.class and allowing custom exclusion from \n')
    xmlfile.write('        user defined file -->\n')
    xmlfile.write('    </emma>\n')
    xmlfile.write(' </target>\n')
    xmlfile.write('  <target name="-dex-instrumented" depends="-emma-instrument">\n')
    xmlfile.write(' <dex-helper>\n')
    xmlfile.write('  <extra-parameters>\n')
    xmlfile.write('  <arg value="--no-locals" />\n')
    xmlfile.write(' </extra-parameters>\n')
    xmlfile.write(' <external-libs>\n')
    xmlfile.write(' <fileset file="${emma.dir}/emma_device.jar" />\n')
    xmlfile.write(' </external-libs>\n')
    xmlfile.write(' </dex-helper>\n')
    xmlfile.write(' </target>\n')
    xmlfile.write(' <!-- Invoked from external files for code coverage purposes -->\n')
    xmlfile.write('<target name="-package-with-emma" depends="-dex-instrumented, -package-resources">\n')
    xmlfile.write('<package-helper\n')
    xmlfile.write('    output.filepath="${out.debug.unaligned.file}">\n')
    xmlfile.write(' <extra-jars>\n')
    xmlfile.write('   <!-- Injected from external file -->\n')
    xmlfile.write('   <jarfile path="${emma.dir}/emma_device.jar" />\n')
    xmlfile.write(' </extra-jars>\n')
    xmlfile.write('</package-helper>\n')
    xmlfile.write('</target>\n')
    xmlfile.write(' <target name="-debug-with-emma" depends="-set-debug-mode, -package-with-emma">\n')
    xmlfile.write('  <zipalign-helper in.package="${out.debug.unaligned.file}"\n')
    xmlfile.write('                        out.package="${out.debug.file}" />\n')
    xmlfile.write('</target>\n')
    xmlfile.write(' <target name="-install-with-emma" depends="-debug-with-emma">\n')
    xmlfile.write('  <install-helper />\n')
    xmlfile.write('</target>\n')
    xmlfile.write('<!-- End of targets for code-coverage measurement purposes -->\n')
    xmlfile.write(' <target name="help">\n')
    xmlfile.write(' <!-- displays starts at col \n')
    xmlfile.write('      |13                                                              80| -->\n')
    xmlfile.write('<echo>Android Ant Build. Available targets:</echo>\n')
    xmlfile.write('<echo>   help:      Displays this help.</echo>\n')
    xmlfile.write('<echo>   clean:     Removes output files created by other targets.</echo>\n')
    xmlfile.write('<echo>   compile:   Compiles projects .java files into .class files.</echo>\n')
    xmlfile.write(' <echo>   debug:     Builds the application and signs it with a debug key.</echo>\n')
    xmlfile.write(' <echo>   release:   Builds the application. The generated apk file must be</echo>\n')
    xmlfile.write(' <echo>              signed before it is published.</echo>\n')
    xmlfile.write('<echo>   install:   Installs/reinstalls the debug package onto a running</echo>\n')
    xmlfile.write(' <echo>              emulator or device.</echo>\n')
    xmlfile.write('<echo>              If the application was previously installed, the</echo>\n')
    xmlfile.write('<echo>              signatures must match.</echo>\n')
    xmlfile.write(' <echo>   uninstall: Uninstalls the application from a running emulator or</echo>\n')
    xmlfile.write('  <echo>              device.</echo>\n')
    xmlfile.write('  </target>\n')
    xmlfile.write('<!--RulesEnd-->\n')
    xmlfile.write('\n')
    xmlfile.write('<!-- extension targets. Uncomment the ones where you want to do custom work\n')
    xmlfile.write('     in between standard targets -->\n')
    xmlfile.write('<!--\n')
    xmlfile.write('    <target name="-pre-build">\n')
    xmlfile.write('    </target>\n')
    xmlfile.write('    <target name="-pre-compile">\n')
    xmlfile.write('    </target>\n')
    xmlfile.write('\n')
    xmlfile.write('    [This is typically used for code obfuscation.\n')
    xmlfile.write('     Compiled code location: ${out.classes.absolute.dir}\n')
    xmlfile.write('     If this is not done in place, override ${out.dex.input.absolute.dir}]\n')
    xmlfile.write('    <target name="-post-compile">\n')
    xmlfile.write('    </target>\n')
    xmlfile.write('-->\n')
    xmlfile.write('\n')
    xmlfile.write('\n')
    xmlfile.write('    <!-- Execute the Android Setup task that will setup some properties\n')
    xmlfile.write('         specific to the target, and import the build rules files.\n')
    xmlfile.write('\n')
    xmlfile.write('         The rules file is imported from\n')
    xmlfile.write('            <SDK>/platforms/<target_platform>/ant/ant_rules_r#.xml\n')
    xmlfile.write('\n')
    xmlfile.write('         To customize existing targets, there are two options:\n')
    xmlfile.write('         - Customize only one target:\n')
    xmlfile.write('             - copy/paste the target into this file, *before* the\n')
    xmlfile.write('               <setup> task.\n')
    xmlfile.write('             - customize it to your needs.\n')
    xmlfile.write('         - Customize the whole script.\n')
    xmlfile.write('             - copy/paste the content of the rules files (minus the top node)\n')
    xmlfile.write('               into this file, *after* the <setup> task\n')
    xmlfile.write('             - disable the import of the rules by changing the setup task\n')
    xmlfile.write('               below to <setup import="false" />. \n')
    xmlfile.write('             - customize to your needs.\n')
    xmlfile.write('    -->\n')
    xmlfile.write('    <setup import ="false"/>\n')
    xmlfile.write('\n')
    xmlfile.write('</project>\n')
    xmlfile.write('\n')
     
    xmlfile.close()
    
    # Update CSS file

    files2find = '*epub_css_r1.css'
    found_css_file = find_files(csspath,files2find)

    if found_css_file:
        css_file = found_css_file[0]
	#css_file = css_file[2:]
        print "****** CSS_FILE:", css_file
        print "****** css_path:", csspath
        source = csspath + css_file
        print "Editing: ", source
	#pdb.set_trace()
        css_source = open(source,"a")
        #write body tag
        css_source.write('\n')
        #css_source.write('body {margin-left: 0.75em;margin-right: 0.75em; line-height:1.25em;}\n')
        css_source.write('body {margin-left: 20px;margin-right: 20px; line-height:1.25em;}\n')
        css_source.write('\n')
        
        css_source.close()
    else:
        print "******** PROBLEM CSS FILE NOT FOUND ************"
   
    #Create folder just in case
    os.system("md assets")
    os.system("md gen")

    #Call Ant script t build app
    os.system("ant\n")

def moveapps(msg,src_dir,des_dir):
    movecmd = 'move /Y "%s*-release.apk" "%s"' % (src_dir,des_dir)
    os.system(movecmd)
    #shutil.move(src_dir, des_dir)

    
    print msg
    # delete the process folder and all it's content
    shutil.rmtree(src_dir)    

#create a folder if it does not exist.
def mkdirp(directory):
    if not os.path.isdir(directory):
        os.makedirs(directory)


#Main

if os.path.isfile("testenv.txt"):
    #Test env found
    path_to_db = "/users/vince/documents/development/Database/product_server.db"
else: 
    #Production
    path_to_db = "/users/dougbaker/cbrdjango/product_server.db"


    
print "+------------------------------------------------------------------------------+"
print "| MAKE_ANDROID_APPS                                             Release: 01/07/2010 |"
print "+------------------------------------------------------------------------------+"
print
#MUST end with /
EPUBFOLDER = "C:/joey/e-pubs/HA/Galaxy_Tablet/Uniberg/FULL/"
OUTPUT_FOLDER = "C:/joey/e-pubs/HA/Galaxy_Tablet/Uniberg"

APKFOLDER = OUTPUT_FOLDER + "\\APPS_IN_PROCESS\\"
APPS_READY_TO_UPLOAD_DIR = OUTPUT_FOLDER + "\\APPS_READY_TO_UPLOAD"
DONE_FOLDER = OUTPUT_FOLDER + "\\EPUB_BUILD_DONE"
PROBLEM_FOLDER = OUTPUT_FOLDER + "\\EPUB_BUILD_PROB"
#create nessary folder
mkdirp(APKFOLDER)
mkdirp(APPS_READY_TO_UPLOAD_DIR)
mkdirp(DONE_FOLDER)
mkdirp(PROBLEM_FOLDER)
#used to placing complied files
mkdirp(OUTPUT_FOLDER + "\\gen")
#used to placing E-pub
mkdirp(OUTPUT_FOLDER + "\\assets")

count = 0
apkcount = 0

for i in range(0,20):
    print "******************** MAKE_FULL_ANDROID_APPS (pass=20) PASS:",i
    epubList = os.listdir(EPUBFOLDER)

    for line in epubList:
        words = line.split(',')
        bookID = words[0].replace('\n','').replace('\r','')

        if ".DS_" in bookID:
            continue
        
        if bookID:
            count = count + 1
            apkcount = apkcount + 1
            print "Processing Book:", count, "BOOK ID: ",bookID
            buildxml(bookID,EPUBFOLDER)
            book_dir = EPUBFOLDER + "/%s" % bookID
            
            if os.path.isfile(APKFOLDER+bookID+'-release.apk'):
                dest_dir = DONE_FOLDER + "\\%s" % bookID
            else:
                dest_dir = PROBLEM_FOLDER + "\\%s" % bookID
                
                if apkcount > 1:
                    apkcount = apkcount - 1
                          
            shutil.move(book_dir, dest_dir)
            
            # move files if > 160
            if apkcount > 160:
                apkcount = 0
                moveapps("**** Moving Ready APPS, limit reached (>160)......",APKFOLDER,APPS_READY_TO_UPLOAD_DIR)

#Just in case move what ever is in process
#pdb.set_trace()
moveapps("**** Moving Ready APPS, Program process completed......",APKFOLDER,APPS_READY_TO_UPLOAD_DIR)
print ".....All DoNe....."

